package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	tembodataclient "github.com/tembo-io/terraform-provider-tembo/tembodataclient"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &temboInstanceSecretsDataSource{}
	_ datasource.DataSourceWithConfigure = &temboInstanceSecretsDataSource{}
)

// NewTemboInstanceSecretsDataSource is a helper function to simplify the provider implementation.
func NewTemboInstanceSecretsDataSource() datasource.DataSource {
	return &temboInstanceSecretsDataSource{}
}

// TemboInstanceSecretsDataSource is the data source implementation.
type temboInstanceSecretsDataSource struct {
	temboInstanceSecretsConfig instanceSecretsConfig
}

// Tembo Cluster Configuration.
type instanceSecretsConfig struct {
	client      *tembodataclient.APIClient
	accessToken string
}

// Metadata returns the data source type name.
func (d *temboInstanceSecretsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_instance_secrets"
}

// Schema defines the schema for the data source.
func (d *temboInstanceSecretsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data Source for Tembo Instance Secrets.",
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				MarkdownDescription: "Unique ID for the instance generated by Tembo",
				Required:            true,
			},
			"instance_id": schema.StringAttribute{
				MarkdownDescription: "Unique ID for the instance generated by Tembo",
				Required:            true,
			},
			"available_secrets": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Unique ID for the instance generated by Tembo",
							Optional:            true,
						},
						"possible_keys": schema.ListAttribute{
							Optional:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
		},
	}
}

// Configure adds the provider configured client to the data source.
func (d *temboInstanceSecretsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	temboInstanceSecretsConfig, ok := req.ProviderData.(instanceSecretsConfig)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *instanceSecretsConfig, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.temboInstanceSecretsConfig = temboInstanceSecretsConfig
}

// temboInstanceSecretsDataSourceModel maps the data source schema data.
type temboInstanceSecretsDataSourceModel struct {
	OrgId            types.String      `tfsdk:"org_id"`
	InstanceId       types.String      `tfsdk:"instance_id"`
	AvailableSecrets []availableSecret `tfsdk:"available_secrets"`
}

// availableSecretsModel maps instanceSecrets schema data.
type availableSecret struct {
	// The name of an available secret
	Name types.String `tfsdk:"name"`
	// For this secret, available keys
	PossibleKeys []types.String `tfsdk:"possible_keys"`
}

// Read refreshes the Terraform state with the latest data.
func (d *temboInstanceSecretsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	// Get current state
	var state temboInstanceSecretsDataSourceModel

	ctx = context.WithValue(ctx, tembodataclient.ContextAccessToken, d.temboInstanceSecretsConfig.accessToken)

	var orgId string
	resp.Diagnostics.Append(req.Config.GetAttribute(ctx, path.Root("org_id"), &orgId)...)

	var instanceId string
	resp.Diagnostics.Append(req.Config.GetAttribute(ctx, path.Root("instance_id"), &instanceId)...)

	if resp.Diagnostics.HasError() {
		tflog.Error(ctx, fmt.Sprintf("error reading terraform plan %v", resp.Diagnostics.Errors()))
		return
	}

	// Get refreshed Instance value from API
	availableSecrets, _, err := d.temboInstanceSecretsConfig.client.SecretsApi.GetSecretNamesV1(ctx, orgId, instanceId).Execute()
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Read Tembo Instance Available Secrets",
			err.Error(),
		)
		return
	}

	if len(availableSecrets) > 0 {
		for _, aSecret := range availableSecrets {
			state.AvailableSecrets = append(state.AvailableSecrets, availableSecret{Name: types.StringValue(aSecret.Name), PossibleKeys: getPossibleKeys(aSecret.PossibleKeys)})
		}
	}

	// Set refreshed state
	diags := resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func getPossibleKeys(possibleKeys []string) []basetypes.StringValue {
	var localPossibleKeys []basetypes.StringValue
	if len(possibleKeys) > 0 {
		for _, possibleKey := range possibleKeys {
			localPossibleKeys = append(localPossibleKeys, types.StringValue(possibleKey))
		}
	}
	return localPossibleKeys
}
