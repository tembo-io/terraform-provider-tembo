package provider

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	temboclient "github.com/tembo-io/terraform-provider-tembo/temboclient"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &temboInstanceDataSource{}
	_ datasource.DataSourceWithConfigure = &temboInstanceDataSource{}
)

type temboInstanceDataSourceModel struct {
	InstanceID              types.String   `tfsdk:"instance_id"`
	InstanceName            types.String   `tfsdk:"instance_name"`
	OrgId                   types.String   `tfsdk:"org_id"`
	CPU                     types.String   `tfsdk:"cpu"`
	StackType               types.String   `tfsdk:"stack_type"`
	Environment             types.String   `tfsdk:"environment"`
	Replicas                types.Int64    `tfsdk:"replicas"`
	Memory                  types.String   `tfsdk:"memory"`
	Storage                 types.String   `tfsdk:"storage"`
	State                   types.String   `tfsdk:"state"`
	LastUpdated             types.String   `tfsdk:"last_updated"`
	ExtraDomainsRw          types.List     `tfsdk:"extra_domains_rw"`
	PostgresConfigs         types.List     `tfsdk:"postgres_configs"`
	TrunkInstalls           types.List     `tfsdk:"trunk_installs"`
	Extensions              types.List     `tfsdk:"extensions"`
	IpAllowList             []types.String `tfsdk:"ip_allow_list"`
	ConnectionPooler        types.Object   `tfsdk:"connection_pooler"`
	FirstRecoverabilityTime types.String   `tfsdk:"first_recoverability_time"`
	ProviderId              types.String   `tfsdk:"provider_id"`
	RegionId                types.String   `tfsdk:"region_id"`
	PGVersion               types.String   `tfsdk:"pg_version"`
	Autoscaling             types.Object   `tfsdk:"autoscaling"`
}

// NewTemboInstanceDataSource is a helper function to simplify the provider implementation.
func NewTemboInstanceDataSource() datasource.DataSource {
	return &temboInstanceDataSource{}
}

// temboInstanceDataSource is the data source implementation.
type temboInstanceDataSource struct {
	temboInstanceConfig instanceConfig
}

// Configure adds the provider configured client to the data source.
func (d *temboInstanceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	data, ok := req.ProviderData.(providerData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected providerData, got: %T.", req.ProviderData),
		)
		return
	}

	d.temboInstanceConfig = instanceConfig{
		client:      data.apiClient,
		accessToken: data.accessToken,
	}
}

// Metadata returns the data source type name.
func (d *temboInstanceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_instance"
}

// Schema defines the schema for the data source.
func (d *temboInstanceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Data source for a Tembo instance.",
		Attributes: map[string]schema.Attribute{
			"instance_id": schema.StringAttribute{
				MarkdownDescription: "Unique ID for the instance generated by Tembo",
				Required:            true,
			},
			"org_id": schema.StringAttribute{
				MarkdownDescription: "Id of the organization in which the instance exists",
				Required:            true,
			},
			"instance_name": schema.StringAttribute{
				MarkdownDescription: "Unique name of the instance",
				Computed:            true,
			},
			"cpu": schema.StringAttribute{
				MarkdownDescription: "CPU",
				Computed:            true,
			},
			"stack_type": schema.StringAttribute{
				MarkdownDescription: "Stack type for the instance",
				Computed:            true,
			},
			"environment": schema.StringAttribute{
				MarkdownDescription: "Environment",
				Computed:            true,
			},
			"replicas": schema.Int64Attribute{
				MarkdownDescription: "Instance replicas",
				Computed:            true,
			},
			"memory": schema.StringAttribute{
				MarkdownDescription: "Memory",
				Computed:            true,
			},
			"storage": schema.StringAttribute{
				MarkdownDescription: "Storage",
				Computed:            true,
			},
			"last_updated": schema.StringAttribute{
				MarkdownDescription: "Last updated date time in UTC",
				Computed:            true,
			},
			"state": schema.StringAttribute{
				MarkdownDescription: "Current state of the instance",
				Computed:            true,
			},
			"extra_domains_rw": schema.ListAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Extra domains with read/write access",
				Computed:            true,
			},
			"postgres_configs": schema.ListNestedAttribute{
				MarkdownDescription: "Postgres configurations",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Name of the configuration",
							Computed:            true,
						},
						"value": schema.StringAttribute{
							MarkdownDescription: "Value of the configuration",
							Computed:            true,
						},
					},
				},
			},
			"trunk_installs": schema.ListNestedAttribute{
				MarkdownDescription: "Trunk installs",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Name of the trunk install",
							Computed:            true,
						},
						"version": schema.StringAttribute{
							MarkdownDescription: "Version of the trunk install",
							Computed:            true,
						},
					},
				},
			},
			"extensions": schema.ListNestedAttribute{
				MarkdownDescription: "Extensions",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: "Name of the extension",
							Computed:            true,
						},
						"description": schema.StringAttribute{
							MarkdownDescription: "Description of the extension",
							Computed:            true,
						},
						"locations": schema.ListNestedAttribute{
							MarkdownDescription: "Locations where the extension is installed",
							Computed:            true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"database": schema.StringAttribute{
										MarkdownDescription: "Database where the extension is installed",
										Computed:            true,
									},
									"enabled": schema.BoolAttribute{
										MarkdownDescription: "Whether the extension is enabled",
										Computed:            true,
									},
									"schema": schema.StringAttribute{
										MarkdownDescription: "Schema where the extension is installed",
										Computed:            true,
									},
									"version": schema.StringAttribute{
										MarkdownDescription: "Version of the installed extension",
										Computed:            true,
									},
								},
							},
						},
					},
				},
			},
			"ip_allow_list": schema.ListAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "IP allow list",
				Computed:            true,
			},
			"connection_pooler": schema.SingleNestedAttribute{
				MarkdownDescription: "Connection pooler configuration",
				Computed:            true,
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						MarkdownDescription: "Whether connection pooler is enabled",
						Computed:            true,
					},
					"pooler": schema.SingleNestedAttribute{
						MarkdownDescription: "Pooler configuration",
						Computed:            true,
						Attributes: map[string]schema.Attribute{
							"parameters": schema.MapAttribute{
								ElementType:         types.StringType,
								MarkdownDescription: "Pooler parameters",
								Computed:            true,
							},
							"pool_mode": schema.StringAttribute{
								MarkdownDescription: "Pool mode",
								Computed:            true,
							},
						},
					},
				},
			},
			"first_recoverability_time": schema.StringAttribute{
				MarkdownDescription: "First recoverability time",
				Computed:            true,
			},
			"provider_id": schema.StringAttribute{
				MarkdownDescription: "Provider ID",
				Computed:            true,
			},
			"region_id": schema.StringAttribute{
				MarkdownDescription: "Region ID",
				Computed:            true,
			},
			"pg_version": schema.StringAttribute{
				MarkdownDescription: "PostgreSQL version",
				Computed:            true,
			},
			"autoscaling": schema.SingleNestedAttribute{
				MarkdownDescription: "Autoscaling configuration",
				Computed:            true,
				Attributes: map[string]schema.Attribute{
					"storage": schema.ListNestedAttribute{
						MarkdownDescription: "Storage autoscaling configuration",
						Computed:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"enabled": schema.BoolAttribute{
									MarkdownDescription: "Whether storage autoscaling is enabled",
									Computed:            true,
								},
								"max_gb": schema.StringAttribute{
									MarkdownDescription: "Maximum storage in GB",
									Computed:            true,
								},
							},
						},
					},
					"autostop": schema.ListNestedAttribute{
						MarkdownDescription: "Autostop configuration",
						Computed:            true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"enabled": schema.BoolAttribute{
									MarkdownDescription: "Whether autostop is enabled",
									Computed:            true,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Read refreshes the Terraform state with the latest data.
func (d *temboInstanceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state temboInstanceDataSourceModel

	// Add this line to set the auth header
	ctx = context.WithValue(ctx, temboclient.ContextAccessToken, d.temboInstanceConfig.accessToken)

	var orgId string
	resp.Diagnostics.Append(req.Config.GetAttribute(ctx, path.Root("org_id"), &orgId)...)

	var instanceId string
	resp.Diagnostics.Append(req.Config.GetAttribute(ctx, path.Root("instance_id"), &instanceId)...)

	if resp.Diagnostics.HasError() {
		tflog.Error(ctx, fmt.Sprintf("error reading terraform plan %v", resp.Diagnostics.Errors()))
		return
	}

	instance, httpResp, err := d.temboInstanceConfig.client.InstanceAPI.GetInstance(ctx, orgId, instanceId).Execute()
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Reading Tembo Instance",
			"Could not read Tembo Instance ID "+instanceId+": "+getErrorFromResponse(httpResp),
		)
		return
	}

	// Map response body to model
	state.InstanceID = types.StringValue(instance.GetInstanceId())
	state.InstanceName = types.StringValue(instance.GetInstanceName())
	state.OrgId = types.StringValue(orgId)
	state.CPU = types.StringValue(string(instance.GetCpu()))
	state.StackType = types.StringValue(string(instance.GetStackType()))
	state.Environment = types.StringValue(string(instance.GetEnvironment()))
	state.Replicas = types.Int64Value(int64(instance.GetReplicas()))
	state.Memory = types.StringValue(string(instance.GetMemory()))
	state.Storage = types.StringValue(string(instance.GetStorage()))
	state.State = types.StringValue(string(instance.GetState()))
	state.LastUpdated = types.StringValue(instance.GetLastUpdatedAt().Format(time.RFC850))
	state.FirstRecoverabilityTime = types.StringValue(instance.GetFirstRecoverabilityTime().Format(time.RFC850))
	state.ProviderId = types.StringValue(instance.GetProviderId())
	state.RegionId = types.StringValue(instance.GetRegionId())
	state.PGVersion = types.StringValue(fmt.Sprintf("%v", instance.GetPostgresVersion()))

	mapInstanceToDataSourceModel(instance, &state)

	// Map the ip_allow_list
	state.IpAllowList = getStringArrayToTypes(instance.GetIpAllowList())

	// Map the autoscaling
	storageElements := make([]attr.Value, 0)
	if autoscaling, ok := instance.GetAutoscalingOk(); ok && autoscaling.Storage != nil {
		storageElements = append(storageElements, types.ObjectValueMust(
			map[string]attr.Type{
				"enabled": types.BoolType,
				"max_gb":  types.StringType,
			},
			map[string]attr.Value{
				"enabled": types.BoolValue(true),
				"max_gb":  types.StringValue(string(autoscaling.Storage.GetMaximum())),
			},
		))
	}
	storageList, _ := types.ListValue(
		types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"enabled": types.BoolType,
				"max_gb":  types.StringType,
			},
		},
		storageElements,
	)

	autostopElements := make([]attr.Value, 0)
	if autostop, ok := instance.Autoscaling.GetAutostopOk(); ok {
		autostopElements = append(autostopElements, types.ObjectValueMust(
			map[string]attr.Type{
				"enabled": types.BoolType,
			},
			map[string]attr.Value{
				"enabled": types.BoolValue(autostop.GetEnabled()),
			},
		))
	}
	autostopList, _ := types.ListValue(
		types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"enabled": types.BoolType,
			},
		},
		autostopElements,
	)

	autoscaling, _ := types.ObjectValue(
		map[string]attr.Type{
			"storage": types.ListType{ElemType: types.ObjectType{AttrTypes: map[string]attr.Type{
				"enabled": types.BoolType,
				"max_gb":  types.StringType,
			}}},
			"autostop": types.ListType{ElemType: types.ObjectType{AttrTypes: map[string]attr.Type{
				"enabled": types.BoolType,
			}}},
		},
		map[string]attr.Value{
			"storage":  storageList,
			"autostop": autostopList,
		},
	)
	state.Autoscaling = autoscaling

	// Set state
	diags := resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}
