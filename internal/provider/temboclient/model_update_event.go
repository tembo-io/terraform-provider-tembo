/*
cp-webserver

CoreDB backend API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// UpdateEvent the model 'UpdateEvent'
type UpdateEvent string

// List of UpdateEvent
const (
	EXTENSION UpdateEvent = "extension"
	RESTART UpdateEvent = "restart"
	STOP UpdateEvent = "stop"
	UPDATE UpdateEvent = "update"
)

// All allowed values of UpdateEvent enum
var AllowedUpdateEventEnumValues = []UpdateEvent{
	"extension",
	"restart",
	"stop",
	"update",
}

func (v *UpdateEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UpdateEvent(value)
	for _, existing := range AllowedUpdateEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UpdateEvent", value)
}

// NewUpdateEventFromValue returns a pointer to a valid UpdateEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateEventFromValue(v string) (*UpdateEvent, error) {
	ev := UpdateEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpdateEvent: valid values are %v", v, AllowedUpdateEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateEvent) IsValid() bool {
	for _, existing := range AllowedUpdateEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UpdateEvent value
func (v UpdateEvent) Ptr() *UpdateEvent {
	return &v
}

type NullableUpdateEvent struct {
	value *UpdateEvent
	isSet bool
}

func (v NullableUpdateEvent) Get() *UpdateEvent {
	return v.value
}

func (v *NullableUpdateEvent) Set(val *UpdateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEvent(val *UpdateEvent) *NullableUpdateEvent {
	return &NullableUpdateEvent{value: val, isSet: true}
}

func (v NullableUpdateEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

