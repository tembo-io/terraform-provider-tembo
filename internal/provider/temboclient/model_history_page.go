/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the HistoryPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryPage{}

// HistoryPage struct for HistoryPage
type HistoryPage struct {
	// List of historical results
	History []HistoryEntry `json:"history"`
	Pagination PaginationInfo `json:"pagination"`
	AdditionalProperties map[string]interface{}
}

type _HistoryPage HistoryPage

// NewHistoryPage instantiates a new HistoryPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryPage(history []HistoryEntry, pagination PaginationInfo) *HistoryPage {
	this := HistoryPage{}
	this.History = history
	this.Pagination = pagination
	return &this
}

// NewHistoryPageWithDefaults instantiates a new HistoryPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryPageWithDefaults() *HistoryPage {
	this := HistoryPage{}
	return &this
}

// GetHistory returns the History field value
func (o *HistoryPage) GetHistory() []HistoryEntry {
	if o == nil {
		var ret []HistoryEntry
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *HistoryPage) GetHistoryOk() ([]HistoryEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.History, true
}

// SetHistory sets field value
func (o *HistoryPage) SetHistory(v []HistoryEntry) {
	o.History = v
}

// GetPagination returns the Pagination field value
func (o *HistoryPage) GetPagination() PaginationInfo {
	if o == nil {
		var ret PaginationInfo
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *HistoryPage) GetPaginationOk() (*PaginationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *HistoryPage) SetPagination(v PaginationInfo) {
	o.Pagination = v
}

func (o HistoryPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["history"] = o.History
	toSerialize["pagination"] = o.Pagination

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HistoryPage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"history",
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoryPage := _HistoryPage{}

	err = json.Unmarshal(data, &varHistoryPage)

	if err != nil {
		return err
	}

	*o = HistoryPage(varHistoryPage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "history")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHistoryPage struct {
	value *HistoryPage
	isSet bool
}

func (v NullableHistoryPage) Get() *HistoryPage {
	return v.value
}

func (v *NullableHistoryPage) Set(val *HistoryPage) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryPage) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryPage(val *HistoryPage) *NullableHistoryPage {
	return &NullableHistoryPage{value: val, isSet: true}
}

func (v NullableHistoryPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


