/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AppType - struct for AppType
type AppType struct {
	AppTypeOneOf *AppTypeOneOf
	AppTypeOneOf1 *AppTypeOneOf1
	AppTypeOneOf2 *AppTypeOneOf2
	AppTypeOneOf3 *AppTypeOneOf3
	AppTypeOneOf4 *AppTypeOneOf4
	AppTypeOneOf5 *AppTypeOneOf5
	AppTypeOneOf6 *AppTypeOneOf6
}

// AppTypeOneOfAsAppType is a convenience function that returns AppTypeOneOf wrapped in AppType
func AppTypeOneOfAsAppType(v *AppTypeOneOf) AppType {
	return AppType{
		AppTypeOneOf: v,
	}
}

// AppTypeOneOf1AsAppType is a convenience function that returns AppTypeOneOf1 wrapped in AppType
func AppTypeOneOf1AsAppType(v *AppTypeOneOf1) AppType {
	return AppType{
		AppTypeOneOf1: v,
	}
}

// AppTypeOneOf2AsAppType is a convenience function that returns AppTypeOneOf2 wrapped in AppType
func AppTypeOneOf2AsAppType(v *AppTypeOneOf2) AppType {
	return AppType{
		AppTypeOneOf2: v,
	}
}

// AppTypeOneOf3AsAppType is a convenience function that returns AppTypeOneOf3 wrapped in AppType
func AppTypeOneOf3AsAppType(v *AppTypeOneOf3) AppType {
	return AppType{
		AppTypeOneOf3: v,
	}
}

// AppTypeOneOf4AsAppType is a convenience function that returns AppTypeOneOf4 wrapped in AppType
func AppTypeOneOf4AsAppType(v *AppTypeOneOf4) AppType {
	return AppType{
		AppTypeOneOf4: v,
	}
}

// AppTypeOneOf5AsAppType is a convenience function that returns AppTypeOneOf5 wrapped in AppType
func AppTypeOneOf5AsAppType(v *AppTypeOneOf5) AppType {
	return AppType{
		AppTypeOneOf5: v,
	}
}

// AppTypeOneOf6AsAppType is a convenience function that returns AppTypeOneOf6 wrapped in AppType
func AppTypeOneOf6AsAppType(v *AppTypeOneOf6) AppType {
	return AppType{
		AppTypeOneOf6: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf)
	if err == nil {
		jsonAppTypeOneOf, _ := json.Marshal(dst.AppTypeOneOf)
		if string(jsonAppTypeOneOf) == "{}" { // empty struct
			dst.AppTypeOneOf = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf); err != nil {
				dst.AppTypeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf = nil
	}

	// try to unmarshal data into AppTypeOneOf1
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf1)
	if err == nil {
		jsonAppTypeOneOf1, _ := json.Marshal(dst.AppTypeOneOf1)
		if string(jsonAppTypeOneOf1) == "{}" { // empty struct
			dst.AppTypeOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf1); err != nil {
				dst.AppTypeOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf1 = nil
	}

	// try to unmarshal data into AppTypeOneOf2
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf2)
	if err == nil {
		jsonAppTypeOneOf2, _ := json.Marshal(dst.AppTypeOneOf2)
		if string(jsonAppTypeOneOf2) == "{}" { // empty struct
			dst.AppTypeOneOf2 = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf2); err != nil {
				dst.AppTypeOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf2 = nil
	}

	// try to unmarshal data into AppTypeOneOf3
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf3)
	if err == nil {
		jsonAppTypeOneOf3, _ := json.Marshal(dst.AppTypeOneOf3)
		if string(jsonAppTypeOneOf3) == "{}" { // empty struct
			dst.AppTypeOneOf3 = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf3); err != nil {
				dst.AppTypeOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf3 = nil
	}

	// try to unmarshal data into AppTypeOneOf4
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf4)
	if err == nil {
		jsonAppTypeOneOf4, _ := json.Marshal(dst.AppTypeOneOf4)
		if string(jsonAppTypeOneOf4) == "{}" { // empty struct
			dst.AppTypeOneOf4 = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf4); err != nil {
				dst.AppTypeOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf4 = nil
	}

	// try to unmarshal data into AppTypeOneOf5
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf5)
	if err == nil {
		jsonAppTypeOneOf5, _ := json.Marshal(dst.AppTypeOneOf5)
		if string(jsonAppTypeOneOf5) == "{}" { // empty struct
			dst.AppTypeOneOf5 = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf5); err != nil {
				dst.AppTypeOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf5 = nil
	}

	// try to unmarshal data into AppTypeOneOf6
	err = newStrictDecoder(data).Decode(&dst.AppTypeOneOf6)
	if err == nil {
		jsonAppTypeOneOf6, _ := json.Marshal(dst.AppTypeOneOf6)
		if string(jsonAppTypeOneOf6) == "{}" { // empty struct
			dst.AppTypeOneOf6 = nil
		} else {
			if err = validator.Validate(dst.AppTypeOneOf6); err != nil {
				dst.AppTypeOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AppTypeOneOf6 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppTypeOneOf = nil
		dst.AppTypeOneOf1 = nil
		dst.AppTypeOneOf2 = nil
		dst.AppTypeOneOf3 = nil
		dst.AppTypeOneOf4 = nil
		dst.AppTypeOneOf5 = nil
		dst.AppTypeOneOf6 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppType) MarshalJSON() ([]byte, error) {
	if src.AppTypeOneOf != nil {
		return json.Marshal(&src.AppTypeOneOf)
	}

	if src.AppTypeOneOf1 != nil {
		return json.Marshal(&src.AppTypeOneOf1)
	}

	if src.AppTypeOneOf2 != nil {
		return json.Marshal(&src.AppTypeOneOf2)
	}

	if src.AppTypeOneOf3 != nil {
		return json.Marshal(&src.AppTypeOneOf3)
	}

	if src.AppTypeOneOf4 != nil {
		return json.Marshal(&src.AppTypeOneOf4)
	}

	if src.AppTypeOneOf5 != nil {
		return json.Marshal(&src.AppTypeOneOf5)
	}

	if src.AppTypeOneOf6 != nil {
		return json.Marshal(&src.AppTypeOneOf6)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppTypeOneOf != nil {
		return obj.AppTypeOneOf
	}

	if obj.AppTypeOneOf1 != nil {
		return obj.AppTypeOneOf1
	}

	if obj.AppTypeOneOf2 != nil {
		return obj.AppTypeOneOf2
	}

	if obj.AppTypeOneOf3 != nil {
		return obj.AppTypeOneOf3
	}

	if obj.AppTypeOneOf4 != nil {
		return obj.AppTypeOneOf4
	}

	if obj.AppTypeOneOf5 != nil {
		return obj.AppTypeOneOf5
	}

	if obj.AppTypeOneOf6 != nil {
		return obj.AppTypeOneOf6
	}

	// all schemas are nil
	return nil
}

type NullableAppType struct {
	value *AppType
	isSet bool
}

func (v NullableAppType) Get() *AppType {
	return v.value
}

func (v *NullableAppType) Set(val *AppType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppType(val *AppType) *NullableAppType {
	return &NullableAppType{value: val, isSet: true}
}

func (v NullableAppType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


