/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the MiddlewareOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiddlewareOneOf1{}

// MiddlewareOneOf1 struct for MiddlewareOneOf1
type MiddlewareOneOf1 struct {
	StripPrefix StripPrefixConfig `json:"stripPrefix"`
}

type _MiddlewareOneOf1 MiddlewareOneOf1

// NewMiddlewareOneOf1 instantiates a new MiddlewareOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiddlewareOneOf1(stripPrefix StripPrefixConfig) *MiddlewareOneOf1 {
	this := MiddlewareOneOf1{}
	this.StripPrefix = stripPrefix
	return &this
}

// NewMiddlewareOneOf1WithDefaults instantiates a new MiddlewareOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiddlewareOneOf1WithDefaults() *MiddlewareOneOf1 {
	this := MiddlewareOneOf1{}
	return &this
}

// GetStripPrefix returns the StripPrefix field value
func (o *MiddlewareOneOf1) GetStripPrefix() StripPrefixConfig {
	if o == nil {
		var ret StripPrefixConfig
		return ret
	}

	return o.StripPrefix
}

// GetStripPrefixOk returns a tuple with the StripPrefix field value
// and a boolean to check if the value has been set.
func (o *MiddlewareOneOf1) GetStripPrefixOk() (*StripPrefixConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StripPrefix, true
}

// SetStripPrefix sets field value
func (o *MiddlewareOneOf1) SetStripPrefix(v StripPrefixConfig) {
	o.StripPrefix = v
}

func (o MiddlewareOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiddlewareOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stripPrefix"] = o.StripPrefix
	return toSerialize, nil
}

func (o *MiddlewareOneOf1) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stripPrefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMiddlewareOneOf1 := _MiddlewareOneOf1{}

	err = json.Unmarshal(bytes, &varMiddlewareOneOf1)

	if err != nil {
		return err
	}

	*o = MiddlewareOneOf1(varMiddlewareOneOf1)

	return err
}

type NullableMiddlewareOneOf1 struct {
	value *MiddlewareOneOf1
	isSet bool
}

func (v NullableMiddlewareOneOf1) Get() *MiddlewareOneOf1 {
	return v.value
}

func (v *NullableMiddlewareOneOf1) Set(val *MiddlewareOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMiddlewareOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMiddlewareOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiddlewareOneOf1(val *MiddlewareOneOf1) *NullableMiddlewareOneOf1 {
	return &NullableMiddlewareOneOf1{value: val, isSet: true}
}

func (v NullableMiddlewareOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiddlewareOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


