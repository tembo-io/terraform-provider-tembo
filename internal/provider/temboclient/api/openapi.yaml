openapi: 3.0.3
info:
  description: "Platform API for Tembo Cloud\n            </br>\n            </br>\n\
    \            To find a Tembo Data API, please find it here:\n            </br>\n\
    \            </br>\n            [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)\n\
    \            "
  title: Tembo Cloud
  version: v1.0.0
servers:
- url: /
security:
- jwt_token: []
paths:
  /api/v1/apps:
    get:
      description: |
        Attributes for all apps
      operationId: get_all_apps
      responses:
        "200":
          content:
            application/json:
              schema:
                items: {}
                type: array
          description: App specification represented as JSON
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
      summary: Attributes for all apps
      tags:
      - app
  /api/v1/apps/{type}:
    get:
      description: |
        Get the attributes of a single App
      operationId: get_app
      parameters:
      - example: http
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Specification of the app
        "400":
          content:
            application/json:
              schema: {}
          description: Invalid App
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
      summary: Get the attributes of a single App
      tags:
      - app
  /api/v1/orgs/instances/schema:
    get:
      description: |
        Get the json-schema for an instance
      operationId: get_schema
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: json-schema for a Tembo Instance
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
      summary: Get the json-schema for an instance
      tags:
      - instance
  /api/v1/orgs/{org_id}/instances:
    get:
      description: |
        Get all Tembo instances in an organization
      operationId: get_all
      parameters:
      - description: organization id for the request
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Instance'
                type: array
          description: All instances in your org
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid org_id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
      summary: Get all Tembo instances in an organization
      tags:
      - instance
    post:
      description: |
        Create a new Tembo instance
      operationId: create_instance
      parameters:
      - description: Organization ID that owns the Tembo instance
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              stack_type: OLTP
              instance_name: my-tembo-instance
              cpu: "1"
              memory: 2Gi
              storage: 10Gi
              replicas: 1
              environment: dev
            schema:
              $ref: '#/components/schemas/CreateInstance'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Creating new Tembo instance
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid request parameters
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Naming conflict
      summary: Create a new Tembo instance
      tags:
      - instance
  /api/v1/orgs/{org_id}/instances/{instance_id}:
    delete:
      description: |
        Delete an existing Tembo instance
      operationId: delete_instance
      parameters:
      - description: Organization id of the instance to delete
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: Delete this instance id
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Deleting instance
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid state transition
      summary: Delete an existing Tembo instance
      tags:
      - instance
    get:
      description: |
        Get an existing Tembo instance
      operationId: get_instance
      parameters:
      - description: Organization ID that owns the instance
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: The requested Tembo instance
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid org_id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
      summary: Get an existing Tembo instance
      tags:
      - instance
    patch:
      description: |
        Update attributes on an existing Tembo instance
      operationId: patch_instance
      parameters:
      - description: Organization ID that owns the instance
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchInstance'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Updating attributes on the instance
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid request parameters
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid state transition
      summary: Update attributes on an existing Tembo instance
      tags:
      - instance
    post:
      description: |-
        Lifecycle events for a Tembo instance

        Currently only supports restart
      operationId: instance_event
      parameters:
      - description: Organization ID that owns the Tembo instance
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: event_type
        required: true
        schema:
          $ref: '#/components/schemas/InstanceEvent'
        style: form
      - explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Replace the attributes of the Tembo instance
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid state transition
      summary: Lifecycle events for a Tembo instance
      tags:
      - instance
    put:
      description: |
        Replace all attributes of an existing Tembo instance
      operationId: put_instance
      parameters:
      - description: Organization ID that owns the Tembo instance
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstance'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Replace the attributes of the Tembo instance
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid state transition
      summary: Replace all attributes of an existing Tembo instance
      tags:
      - instance
  /api/v1/orgs/{org_id}/restore:
    post:
      description: |
        Restore a Tembo instance
      operationId: restore_instance
      parameters:
      - description: Organization ID that owns the Tembo instance
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreInstance'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          description: Restoring to a new Tembo instance
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Invalid request parameters
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Naming conflict
      summary: Restore a Tembo instance
      tags:
      - instance
  /api/v1/stacks:
    get:
      description: |
        Attributes for all stacks
      operationId: get_all_entities
      responses:
        "200":
          content:
            application/json:
              schema:
                items: {}
                type: array
          description: Stack specification represented as JSON
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
      summary: Attributes for all stacks
      tags:
      - stack
  /api/v1/stacks/{type}:
    get:
      description: |
        Get the attributes of a single stack
      operationId: get_entity
      parameters:
      - description: the type of entity
        example: standard
        explode: false
        in: path
        name: type
        required: true
        schema:
          $ref: '#/components/schemas/StackType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Specification of the entity
        "400":
          content:
            application/json:
              schema: {}
          description: Invalid Stack
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseSchema'
          description: Unauthorized
      summary: Get the attributes of a single stack
      tags:
      - stack
components:
  schemas:
    AppConfig:
      properties:
        env:
          items:
            $ref: '#/components/schemas/EnvVar'
          nullable: true
          type: array
        resources:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          nullable: true
      type: object
    AppService:
      description: |-
        AppService significantly extends the functionality of your Tembo Postgres
        instance by running tools and software built by the Postgres open source community.

        **Example**: This will configure and install a Postgrest container along side
        the Postgres instance, install pg_graphql extension, and configure the
        ingress routing to expose the Postgrest service.

        ```yaml
        apiVersion: coredb.io/v1alpha1
        kind: CoreDB
        metadata:
        name: test-db
        spec:
        trunk_installs:
        - name: pg_graphql
        version: 1.2.0
        extensions:
        - name: pg_graphql
        locations:
        - database: postgres
        enabled: true

        appServices:
        - name: postgrest
        image: postgrest/postgrest:v10.0.0
        routing:
        # only expose /rest/v1 and /graphql/v1
        - port: 3000
        ingressPath: /rest/v1
        middlewares:
        - my-headers
        - port: 3000
        ingressPath: /graphql/v1
        middlewares:
        - map-gql
        - my-headers
        middlewares:
        - customRequestHeaders:
        name: my-headers
        config:
        # removes auth header from request
        Authorization: ""
        Content-Profile: graphql
        Accept-Profile: graphql
        - stripPrefix:
        name: my-strip-prefix
        config:
        - /rest/v1
        # reroute gql and rest requests
        - replacePathRegex:
        name: map-gql
        config:
        regex: \/graphql\/v1\/?
        replacement: /rpc/resolve
        env:
        - name: PGRST_DB_URI
        valueFromPlatform: ReadWriteConnection
        - name: PGRST_DB_SCHEMA
        value: "public, graphql"
        - name: PGRST_DB_ANON_ROLE
        value: postgres
        - name: PGRST_LOG_LEVEL
        value: info
        ```
      properties:
        args:
          description: |-
            Defines the arguments to pass into the container if needed.
            You define this in the same manner as you would for all Kubernetes containers.
            See the [Kubernetes docs](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container).
          items:
            type: string
          nullable: true
          type: array
        command:
          description: |-
            Defines the command into the container if needed.
            You define this in the same manner as you would for all Kubernetes containers.
            See the [Kubernetes docs](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container).
          items:
            type: string
          nullable: true
          type: array
        env:
          description: |-
            Defines the environment variables to pass into the container if needed.
            You define this in the same manner as you would for all Kubernetes containers.
            See the [Kubernetes docs](https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container).
          items:
            $ref: '#/components/schemas/EnvVar'
          nullable: true
          type: array
        image:
          description: Defines the container image to use for the appService.
          type: string
        middlewares:
          description: |-
            Defines the ingress middeware configuration for the appService.
            This is specifically configured for the ingress controller Traefik.
          items:
            $ref: '#/components/schemas/Middleware'
          nullable: true
          type: array
        name:
          description: Defines the name of the appService.
          type: string
        probes:
          allOf:
          - $ref: '#/components/schemas/Probes'
          nullable: true
        resources:
          $ref: '#/components/schemas/ResourceRequirements'
        routing:
          description: Defines the routing configuration for the appService.
          items:
            $ref: '#/components/schemas/Routing'
          nullable: true
          type: array
        storage:
          allOf:
          - $ref: '#/components/schemas/StorageConfig'
          nullable: true
      required:
      - image
      - name
      type: object
    AppType:
      oneOf:
      - $ref: '#/components/schemas/AppType_oneOf'
      - $ref: '#/components/schemas/AppType_oneOf_1'
      - $ref: '#/components/schemas/AppType_oneOf_2'
      - $ref: '#/components/schemas/AppType_oneOf_3'
      - $ref: '#/components/schemas/AppType_oneOf_4'
      - $ref: '#/components/schemas/AppType_oneOf_5'
    ConnectionInfo:
      properties:
        host:
          type: string
        password:
          type: string
        pooler_host:
          nullable: true
          type: string
        port:
          format: int32
          type: integer
        user:
          type: string
      required:
      - host
      - password
      - port
      - user
      type: object
    ConnectionPooler:
      description: |-
        A connection pooler is a tool used to manage database connections, sitting
        between your application and Postgres instance. Because of the way Postgres
        handles connections, the server may encounter resource constraint issues
        when managing a few thousand connections. Using a pooler can alleviate these
        issues by using actual Postgres connections only when necessary

        **Example**: A typical connection pooler configuration

        ```yaml
        apiVersion: coredb.io/v1alpha1
        kind: CoreDB
        metadata:
        name: test-db
        spec:
        connectionPooler:
        enabled: true
        pooler:
        poolMode: transaction
        # Valid parameter values can be found at https://www.pgbouncer.org/config.html
        parameters:
        default_pool_size: "50"
        max_client_conn: "5000"
        resources:
        limits:
        cpu: 200m
        memory: 256Mi
        requests:
        cpu: 100m
        memory: 128Mi
        ```
      properties:
        enabled:
          description: |-
            Enable the connection pooler

            **Default**: false.
          type: boolean
        pooler:
          $ref: '#/components/schemas/PgBouncer'
      type: object
    Cpu:
      enum:
      - "0.25"
      - "0.5"
      - "1"
      - "2"
      - "4"
      - "6"
      - "8"
      - "12"
      - "16"
      - "32"
      type: string
    CreateInstance:
      example:
        instance_name: instance_name
        memory: null
        app_services:
        - restapi: ""
        - restapi: ""
        replicas: 6
        cpu: null
        storage: null
        environment: null
        extensions:
        - name: name
          description: description
          locations:
          - schema: schema
            database: database
            version: version
            enabled: true
          - schema: schema
            database: database
            version: version
            enabled: true
        - name: name
          description: description
          locations:
          - schema: schema
            database: database
            version: version
            enabled: true
          - schema: schema
            database: database
            version: version
            enabled: true
        extra_domains_rw:
        - extra_domains_rw
        - extra_domains_rw
        stack_type: null
        postgres_configs:
        - name: name
          value: value
        - name: name
          value: value
        trunk_installs:
        - name: name
          version: version
        - name: name
          version: version
        ip_allow_list:
        - ip_allow_list
        - ip_allow_list
        pg_version: 0
        connection_pooler: ""
      properties:
        app_services:
          items:
            $ref: '#/components/schemas/AppType'
          nullable: true
          type: array
        connection_pooler:
          allOf:
          - $ref: '#/components/schemas/ConnectionPooler'
          nullable: true
        cpu:
          $ref: '#/components/schemas/Cpu'
        environment:
          $ref: '#/components/schemas/Environment'
        extensions:
          items:
            $ref: '#/components/schemas/Extension'
          nullable: true
          type: array
        extra_domains_rw:
          items:
            type: string
          nullable: true
          type: array
        instance_name:
          type: string
        ip_allow_list:
          items:
            type: string
          nullable: true
          type: array
        memory:
          $ref: '#/components/schemas/Memory'
        pg_version:
          format: int32
          minimum: 0
          type: integer
        postgres_configs:
          items:
            $ref: '#/components/schemas/PgConfig'
          nullable: true
          type: array
        replicas:
          format: int32
          type: integer
        stack_type:
          $ref: '#/components/schemas/StackType'
        storage:
          $ref: '#/components/schemas/Storage'
        trunk_installs:
          items:
            $ref: '#/components/schemas/TrunkInstall'
          nullable: true
          type: array
      required:
      - cpu
      - environment
      - instance_name
      - memory
      - stack_type
      - storage
      type: object
    EnvVar:
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
        valueFromPlatform:
          allOf:
          - $ref: '#/components/schemas/EnvVarRef'
          nullable: true
      required:
      - name
      type: object
    EnvVarRef:
      enum:
      - ReadOnlyConnection
      - ReadWriteConnection
      type: string
    Environment:
      enum:
      - dev
      - test
      - prod
      type: string
    ErrorResponseSchema:
      example:
        error: error
      properties:
        error:
          type: string
      required:
      - error
      type: object
    Extension:
      description: |-
        Extension lets you define a list of extensions to enable on the instance. To enable
        extensions, you must specify the name of the extension and the database, schema, and
        version to enable it on. If the version is not specified, the latest version will be
        used.  The extension must also be installed on the instance.  To install
        extensions, please refer to the `TrunkInstall` resource.

        This example will enable the pg_stat_statements extension on the Postgres database
        in the public schema.

        ```yaml
        apiVersion: coredb.io/v1alpha1
        kind: CoreDB
        metadata:
        name: test-db
        spec:
        extensions:
        - name: pg_stat_statements
        locations:
        - database: postgres
        enabled: true
        schema: public
        version: 1.10.0
        ````
      example:
        name: name
        description: description
        locations:
        - schema: schema
          database: database
          version: version
          enabled: true
        - schema: schema
          database: database
          version: version
          enabled: true
      properties:
        description:
          description: |-
            A description of the extension. (Optional)

            **Default**: "No description provided"
          nullable: true
          type: string
        locations:
          description: A list of locations (databases) to enabled the extension on.
          items:
            $ref: '#/components/schemas/ExtensionInstallLocation'
          type: array
        name:
          description: The name of the extension to enable.
          type: string
      required:
      - locations
      - name
      type: object
    ExtensionInstallLocation:
      description: |-
        ExtensionInstallLocation lets you specify the database, schema, and version to enable
        an extension on.
      example:
        schema: schema
        database: database
        version: version
        enabled: true
      properties:
        database:
          description: |-
            The database to enable the extension on.

            **Default**: "postgres"
          type: string
        enabled:
          description: Enable or disable the extension on this Postgres instance.
          type: boolean
        schema:
          description: "The schema to enable the extension on. (eg: \"public\")"
          nullable: true
          type: string
        version:
          description: "The extension version to install. If not specified, the latest\
            \ version will be used."
          nullable: true
          type: string
      required:
      - enabled
      type: object
    ExtensionInstallLocationStatus:
      example:
        error_message: error_message
        schema: schema
        database: database
        error: true
        version: version
        enabled: true
      properties:
        database:
          type: string
        enabled:
          nullable: true
          type: boolean
        error:
          nullable: true
          type: boolean
        error_message:
          nullable: true
          type: string
        schema:
          nullable: true
          type: string
        version:
          nullable: true
          type: string
      type: object
    ExtensionStatus:
      example:
        name: name
        description: description
        locations:
        - error_message: error_message
          schema: schema
          database: database
          error: true
          version: version
          enabled: true
        - error_message: error_message
          schema: schema
          database: database
          error: true
          version: version
          enabled: true
      properties:
        description:
          nullable: true
          type: string
        locations:
          items:
            $ref: '#/components/schemas/ExtensionInstallLocationStatus'
          type: array
        name:
          type: string
      required:
      - locations
      - name
      type: object
    HeaderConfig:
      properties:
        config:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
      required:
      - config
      - name
      type: object
    Infrastructure:
      properties:
        cpu:
          type: string
        memory:
          type: string
        storage:
          type: string
      type: object
    Ingress:
      properties:
        enabled:
          type: boolean
        path:
          nullable: true
          type: string
      required:
      - enabled
      type: object
    IngressType:
      enum:
      - http
      - tcp
      type: string
    Instance:
      example:
        first_recoverability_time: 2000-01-23T04:56:07.000+00:00
        instance_name: instance_name
        memory: null
        app_services:
        - restapi: ""
        - restapi: ""
        replicas: 6
        cpu: null
        created_at: 2000-01-23T04:56:07.000+00:00
        organization_name: organization_name
        storage: null
        runtime_config:
        - name: name
          value: value
        - name: name
          value: value
        postgres_version: 0
        environment: null
        extensions:
        - name: name
          description: description
          locations:
          - error_message: error_message
            schema: schema
            database: database
            error: true
            version: version
            enabled: true
          - error_message: error_message
            schema: schema
            database: database
            error: true
            version: version
            enabled: true
        - name: name
          description: description
          locations:
          - error_message: error_message
            schema: schema
            database: database
            error: true
            version: version
            enabled: true
          - error_message: error_message
            schema: schema
            database: database
            error: true
            version: version
            enabled: true
        extra_domains_rw:
        - extra_domains_rw
        - extra_domains_rw
        instance_id: instance_id
        stack_type: null
        connection_info: ""
        last_updated_at: 2000-01-23T04:56:07.000+00:00
        postgres_configs:
        - name: name
          value: value
        - name: name
          value: value
        organization_id: organization_id
        trunk_installs:
        - error_message: error_message
          installed_to_pods:
          - installed_to_pods
          - installed_to_pods
          name: name
          error: true
          loading: true
          version: version
        - error_message: error_message
          installed_to_pods:
          - installed_to_pods
          - installed_to_pods
          name: name
          error: true
          loading: true
          version: version
        ip_allow_list:
        - ip_allow_list
        - ip_allow_list
        state: null
        connection_pooler: ""
      properties:
        app_services:
          items:
            $ref: '#/components/schemas/AppType'
          nullable: true
          type: array
        connection_info:
          allOf:
          - $ref: '#/components/schemas/ConnectionInfo'
          nullable: true
        connection_pooler:
          allOf:
          - $ref: '#/components/schemas/ConnectionPooler'
          nullable: true
        cpu:
          $ref: '#/components/schemas/Cpu'
        created_at:
          format: date-time
          type: string
        environment:
          $ref: '#/components/schemas/Environment'
        extensions:
          items:
            $ref: '#/components/schemas/ExtensionStatus'
          nullable: true
          type: array
        extra_domains_rw:
          items:
            type: string
          nullable: true
          type: array
        first_recoverability_time:
          format: date-time
          nullable: true
          type: string
        instance_id:
          type: string
        instance_name:
          type: string
        ip_allow_list:
          items:
            type: string
          nullable: true
          type: array
        last_updated_at:
          format: date-time
          type: string
        memory:
          $ref: '#/components/schemas/Memory'
        organization_id:
          type: string
        organization_name:
          type: string
        postgres_configs:
          items:
            $ref: '#/components/schemas/PgConfig'
          nullable: true
          type: array
        postgres_version:
          description: |-
            Major Postgres version this instance is using.
            Currently: 14, 15 or 16
          format: int32
          minimum: 0
          type: integer
        replicas:
          format: int32
          type: integer
        runtime_config:
          items:
            $ref: '#/components/schemas/PgConfig'
          nullable: true
          type: array
        stack_type:
          $ref: '#/components/schemas/StackType'
        state:
          $ref: '#/components/schemas/State'
        storage:
          $ref: '#/components/schemas/Storage'
        trunk_installs:
          items:
            $ref: '#/components/schemas/TrunkInstallStatus'
          nullable: true
          type: array
      required:
      - cpu
      - environment
      - instance_id
      - instance_name
      - memory
      - organization_id
      - organization_name
      - postgres_version
      - replicas
      - stack_type
      - state
      - storage
      type: object
    InstanceEvent:
      enum:
      - restart
      type: string
    IntOrString:
      oneOf:
      - $ref: '#/components/schemas/IntOrString_oneOf'
      - $ref: '#/components/schemas/IntOrString_oneOf_1'
    Memory:
      enum:
      - 1Gi
      - 2Gi
      - 4Gi
      - 8Gi
      - 16Gi
      - 32Gi
      type: string
    Middleware:
      description: |-
        Midddleware is used to configure the middleware for the appService.
        This is specifically configured for the ingress controller Traefik.

        Please refer to the example in the `AppService` documentation.
      oneOf:
      - $ref: '#/components/schemas/Middleware_oneOf'
      - $ref: '#/components/schemas/Middleware_oneOf_1'
      - $ref: '#/components/schemas/Middleware_oneOf_2'
    PatchInstance:
      example:
        environment: ""
        extensions:
        - name: name
          description: description
          locations:
          - schema: schema
            database: database
            version: version
            enabled: true
          - schema: schema
            database: database
            version: version
            enabled: true
        - name: name
          description: description
          locations:
          - schema: schema
            database: database
            version: version
            enabled: true
          - schema: schema
            database: database
            version: version
            enabled: true
        extra_domains_rw:
        - extra_domains_rw
        - extra_domains_rw
        memory: ""
        app_services:
        - restapi: ""
        - restapi: ""
        postgres_configs:
        - name: name
          value: value
        - name: name
          value: value
        replicas: ""
        trunk_installs:
        - name: name
          version: version
        - name: name
          version: version
        cpu: ""
        ip_allow_list:
        - ip_allow_list
        - ip_allow_list
        storage: ""
        connection_pooler: ""
      properties:
        app_services:
          items:
            $ref: '#/components/schemas/AppType'
          nullable: true
          type: array
        connection_pooler:
          allOf:
          - $ref: '#/components/schemas/ConnectionPooler'
          nullable: true
        cpu:
          allOf:
          - $ref: '#/components/schemas/Cpu'
          nullable: true
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          nullable: true
        extensions:
          items:
            $ref: '#/components/schemas/Extension'
          nullable: true
          type: array
        extra_domains_rw:
          items:
            type: string
          nullable: true
          type: array
        ip_allow_list:
          items:
            type: string
          nullable: true
          type: array
        memory:
          allOf:
          - $ref: '#/components/schemas/Memory'
          nullable: true
        postgres_configs:
          items:
            $ref: '#/components/schemas/PgConfig'
          nullable: true
          type: array
        replicas:
          allOf:
          - $ref: '#/components/schemas/Replicas'
          nullable: true
        storage:
          allOf:
          - $ref: '#/components/schemas/Storage'
          nullable: true
        trunk_installs:
          items:
            $ref: '#/components/schemas/TrunkInstall'
          nullable: true
          type: array
      type: object
    PgBouncer:
      description: PgBouncer is the type for the PGBouncer configuration
      properties:
        parameters:
          additionalProperties:
            type: string
          description: "Valid pgbouncer parameter values can be found at [https://www.pgbouncer.org/config.html](https://www.pgbouncer.org/config.html)"
          nullable: true
          type: object
        poolMode:
          $ref: '#/components/schemas/PoolerPgbouncerPoolMode'
        resources:
          allOf:
          - $ref: '#/components/schemas/PoolerTemplateSpecContainersResources'
          nullable: true
      type: object
    PgConfig:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      - value
      type: object
    PoolerPgbouncerPoolMode:
      description: The PgBouncer configuration
      enum:
      - session
      - transaction
      type: string
    PoolerTemplateSpecContainersResources:
      description: "Compute Resources required by this container. Cannot be updated.\
        \ More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
      properties:
        claims:
          description: |-
            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
            This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
            This field is immutable. It can only be set for containers.
          items:
            $ref: '#/components/schemas/PoolerTemplateSpecContainersResourcesClaims'
          nullable: true
          type: array
        limits:
          additionalProperties:
            $ref: '#/components/schemas/IntOrString'
          description: "Limits describes the maximum amount of compute resources allowed.\
            \ More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
          nullable: true
          type: object
        requests:
          additionalProperties:
            $ref: '#/components/schemas/IntOrString'
          description: "Requests describes the minimum amount of compute resources\
            \ required. If Requests is omitted for a container, it defaults to Limits\
            \ if that is explicitly specified, otherwise to an implementation-defined\
            \ value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
          nullable: true
          type: object
      type: object
    PoolerTemplateSpecContainersResourcesClaims:
      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
      properties:
        name:
          description: Name must match the name of one entry in pod.spec.resourceClaims
            of the Pod where this field is used. It makes that resource available
            inside a container.
          type: string
      required:
      - name
      type: object
    Probe:
      properties:
        initialDelaySeconds:
          format: int32
          minimum: 0
          type: integer
        path:
          type: string
        port:
          format: int32
          type: integer
      required:
      - initialDelaySeconds
      - path
      - port
      type: object
    Probes:
      description: |-
        Probes are used to determine the health of a container.
        You define this in the same manner as you would for all Kubernetes containers.
        See the [Kubernetes docs](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).
      properties:
        liveness:
          $ref: '#/components/schemas/Probe'
        readiness:
          $ref: '#/components/schemas/Probe'
      required:
      - liveness
      - readiness
      type: object
    ReplacePathRegexConfig:
      properties:
        config:
          $ref: '#/components/schemas/ReplacePathRegexConfigType'
        name:
          type: string
      required:
      - config
      - name
      type: object
    ReplacePathRegexConfigType:
      properties:
        regex:
          type: string
        replacement:
          type: string
      required:
      - regex
      - replacement
      type: object
    Replicas:
      format: int32
      type: integer
    Resource:
      properties:
        cpu:
          type: string
        memory:
          type: string
      required:
      - cpu
      - memory
      type: object
    ResourceRequirements:
      properties:
        limits:
          allOf:
          - $ref: '#/components/schemas/Resource'
          nullable: true
        requests:
          allOf:
          - $ref: '#/components/schemas/Resource'
          nullable: true
      type: object
    Restore:
      example:
        instance_id: instance_id
        recovery_target_time: 2000-01-23T04:56:07.000+00:00
      properties:
        instance_id:
          type: string
        recovery_target_time:
          format: date-time
          nullable: true
          type: string
      required:
      - instance_id
      type: object
    RestoreInstance:
      example:
        environment: ""
        extra_domains_rw:
        - extra_domains_rw
        - extra_domains_rw
        instance_name: instance_name
        memory: ""
        restore:
          instance_id: instance_id
          recovery_target_time: 2000-01-23T04:56:07.000+00:00
        app_services:
        - restapi: ""
        - restapi: ""
        cpu: ""
        storage: ""
        connection_pooler: ""
      properties:
        app_services:
          items:
            $ref: '#/components/schemas/AppType'
          nullable: true
          type: array
        connection_pooler:
          allOf:
          - $ref: '#/components/schemas/ConnectionPooler'
          nullable: true
        cpu:
          allOf:
          - $ref: '#/components/schemas/Cpu'
          nullable: true
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          nullable: true
        extra_domains_rw:
          items:
            type: string
          nullable: true
          type: array
        instance_name:
          type: string
        memory:
          allOf:
          - $ref: '#/components/schemas/Memory'
          nullable: true
        restore:
          $ref: '#/components/schemas/Restore'
        storage:
          allOf:
          - $ref: '#/components/schemas/Storage'
          nullable: true
      required:
      - instance_name
      - restore
      type: object
    Routing:
      description: |-
        Routing is used if there is a routing port, then a service is created using
        that Port when ingress_path is present, an ingress is created. Otherwise, no
        ingress is created
      properties:
        entryPoints:
          items:
            type: string
          nullable: true
          type: array
        ingressPath:
          nullable: true
          type: string
        ingressType:
          allOf:
          - $ref: '#/components/schemas/IngressType'
          nullable: true
        middlewares:
          description: provide name of the middleware resources to apply to this route
          items:
            type: string
          nullable: true
          type: array
        port:
          format: int32
          minimum: 0
          type: integer
      required:
      - port
      type: object
    StackType:
      enum:
      - Standard
      - MessageQueue
      - MachineLearning
      - OLAP
      - OLTP
      - VectorDB
      - DataWarehouse
      - Geospatial
      - MongoAlternative
      - RAG
      - Timeseries
      type: string
    State:
      enum:
      - Submitted
      - Up
      - Configuring
      - Error
      - Restarting
      - Starting
      - Stopping
      - Stopped
      - Deleting
      - Deleted
      type: string
    Storage:
      enum:
      - 10Gi
      - 50Gi
      - 100Gi
      - 200Gi
      - 300Gi
      - 400Gi
      - 500Gi
      type: string
    StorageConfig:
      properties:
        volumeMounts:
          items:
            $ref: '#/components/schemas/VolumeMount'
          nullable: true
          type: array
      type: object
    StripPrefixConfig:
      properties:
        config:
          items:
            type: string
          type: array
        name:
          type: string
      required:
      - config
      - name
      type: object
    TrunkInstall:
      description: |-
        TrunkInstall allows installation of extensions from the [pgtrunk](https://pgt.dev)
        registry.  This list should be a list of extension names and versions that you wish to
        install at runtime using the pgtrunk API.

        This example will install the pg_stat_statements extension at version 1.10.0.

        ```yaml
        apiVersion: coredb.io/v1alpha1
        kind: CoreDB
        metadata:
        name: test-db
        spec:
        trunk_installs:
        - name: pg_stat_statements
        version: 1.10.0
        ```
      example:
        name: name
        version: version
      properties:
        name:
          description: |-
            The name of the extension to install. This must be the name of the extension as it
            appears in the [pgtrunk](https://pgt.dev) registry.
          type: string
        version:
          description: |-
            The version of the extension to install. If not specified, the latest version will
            be used. (Optional)
          nullable: true
          type: string
      required:
      - name
      type: object
    TrunkInstallStatus:
      example:
        error_message: error_message
        installed_to_pods:
        - installed_to_pods
        - installed_to_pods
        name: name
        error: true
        loading: true
        version: version
      properties:
        error:
          type: boolean
        error_message:
          nullable: true
          type: string
        installed_to_pods:
          items:
            type: string
          nullable: true
          type: array
        loading:
          type: boolean
        name:
          type: string
        version:
          nullable: true
          type: string
      required:
      - error
      - name
      type: object
    UpdateInstance:
      example:
        environment: null
        extensions:
        - name: name
          description: description
          locations:
          - schema: schema
            database: database
            version: version
            enabled: true
          - schema: schema
            database: database
            version: version
            enabled: true
        - name: name
          description: description
          locations:
          - schema: schema
            database: database
            version: version
            enabled: true
          - schema: schema
            database: database
            version: version
            enabled: true
        extra_domains_rw:
        - extra_domains_rw
        - extra_domains_rw
        memory: null
        app_services:
        - restapi: ""
        - restapi: ""
        postgres_configs:
        - name: name
          value: value
        - name: name
          value: value
        replicas: 0
        trunk_installs:
        - name: name
          version: version
        - name: name
          version: version
        cpu: null
        ip_allow_list:
        - ip_allow_list
        - ip_allow_list
        storage: null
        connection_pooler: ""
      properties:
        app_services:
          items:
            $ref: '#/components/schemas/AppType'
          nullable: true
          type: array
        connection_pooler:
          allOf:
          - $ref: '#/components/schemas/ConnectionPooler'
          nullable: true
        cpu:
          $ref: '#/components/schemas/Cpu'
        environment:
          $ref: '#/components/schemas/Environment'
        extensions:
          items:
            $ref: '#/components/schemas/Extension'
          nullable: true
          type: array
        extra_domains_rw:
          items:
            type: string
          nullable: true
          type: array
        ip_allow_list:
          items:
            type: string
          nullable: true
          type: array
        memory:
          $ref: '#/components/schemas/Memory'
        postgres_configs:
          items:
            $ref: '#/components/schemas/PgConfig'
          nullable: true
          type: array
        replicas:
          format: int32
          type: integer
        storage:
          $ref: '#/components/schemas/Storage'
        trunk_installs:
          items:
            $ref: '#/components/schemas/TrunkInstall'
          nullable: true
          type: array
      required:
      - cpu
      - environment
      - memory
      - replicas
      - storage
      type: object
    VolumeMount:
      properties:
        mount_path:
          type: string
        mount_propagation:
          nullable: true
          type: string
        name:
          type: string
        read_only:
          nullable: true
          type: boolean
        sub_path:
          nullable: true
          type: string
        sub_path_expr:
          nullable: true
          type: string
      required:
      - mount_path
      - name
      type: object
    AppType_oneOf:
      example:
        restapi: ""
      properties:
        restapi:
          allOf:
          - $ref: '#/components/schemas/AppConfig'
          nullable: true
      required:
      - restapi
      type: object
    AppType_oneOf_1:
      properties:
        http:
          allOf:
          - $ref: '#/components/schemas/AppConfig'
          nullable: true
      required:
      - http
      type: object
    AppType_oneOf_2:
      properties:
        mq-api:
          allOf:
          - $ref: '#/components/schemas/AppConfig'
          nullable: true
      required:
      - mq-api
      type: object
    AppType_oneOf_3:
      properties:
        embeddings:
          allOf:
          - $ref: '#/components/schemas/AppConfig'
          nullable: true
      required:
      - embeddings
      type: object
    AppType_oneOf_4:
      properties:
        pganalyze:
          allOf:
          - $ref: '#/components/schemas/AppConfig'
          nullable: true
      required:
      - pganalyze
      type: object
    AppType_oneOf_5:
      properties:
        custom:
          $ref: '#/components/schemas/AppService'
      required:
      - custom
      type: object
    IntOrString_oneOf:
      properties:
        Int:
          format: int32
          type: integer
      required:
      - Int
      type: object
    IntOrString_oneOf_1:
      properties:
        String:
          type: string
      required:
      - String
      type: object
    Middleware_oneOf:
      properties:
        customRequestHeaders:
          $ref: '#/components/schemas/HeaderConfig'
      required:
      - customRequestHeaders
      type: object
    Middleware_oneOf_1:
      properties:
        stripPrefix:
          $ref: '#/components/schemas/StripPrefixConfig'
      required:
      - stripPrefix
      type: object
    Middleware_oneOf_2:
      properties:
        replacePathRegex:
          $ref: '#/components/schemas/ReplacePathRegexConfig'
      required:
      - replacePathRegex
      type: object
  securitySchemes:
    jwt_token:
      bearerFormat: JWT
      scheme: bearer
      type: http
