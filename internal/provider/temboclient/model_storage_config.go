/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
)

// checks if the StorageConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageConfig{}

// StorageConfig struct for StorageConfig
type StorageConfig struct {
	VolumeMounts []VolumeMount `json:"volumeMounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageConfig StorageConfig

// NewStorageConfig instantiates a new StorageConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageConfig() *StorageConfig {
	this := StorageConfig{}
	return &this
}

// NewStorageConfigWithDefaults instantiates a new StorageConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageConfigWithDefaults() *StorageConfig {
	this := StorageConfig{}
	return &this
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageConfig) GetVolumeMounts() []VolumeMount {
	if o == nil {
		var ret []VolumeMount
		return ret
	}
	return o.VolumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageConfig) GetVolumeMountsOk() ([]VolumeMount, bool) {
	if o == nil || IsNil(o.VolumeMounts) {
		return nil, false
	}
	return o.VolumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *StorageConfig) HasVolumeMounts() bool {
	if o != nil && !IsNil(o.VolumeMounts) {
		return true
	}

	return false
}

// SetVolumeMounts gets a reference to the given []VolumeMount and assigns it to the VolumeMounts field.
func (o *StorageConfig) SetVolumeMounts(v []VolumeMount) {
	o.VolumeMounts = v
}

func (o StorageConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.VolumeMounts != nil {
		toSerialize["volumeMounts"] = o.VolumeMounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageConfig) UnmarshalJSON(data []byte) (err error) {
	varStorageConfig := _StorageConfig{}

	err = json.Unmarshal(data, &varStorageConfig)

	if err != nil {
		return err
	}

	*o = StorageConfig(varStorageConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "volumeMounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageConfig struct {
	value *StorageConfig
	isSet bool
}

func (v NullableStorageConfig) Get() *StorageConfig {
	return v.value
}

func (v *NullableStorageConfig) Set(val *StorageConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageConfig(val *StorageConfig) *NullableStorageConfig {
	return &NullableStorageConfig{value: val, isSet: true}
}

func (v NullableStorageConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


