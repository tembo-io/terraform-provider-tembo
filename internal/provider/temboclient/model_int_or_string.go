/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IntOrString - struct for IntOrString
type IntOrString struct {
	IntOrStringOneOf *IntOrStringOneOf
	IntOrStringOneOf1 *IntOrStringOneOf1
}

// IntOrStringOneOfAsIntOrString is a convenience function that returns IntOrStringOneOf wrapped in IntOrString
func IntOrStringOneOfAsIntOrString(v *IntOrStringOneOf) IntOrString {
	return IntOrString{
		IntOrStringOneOf: v,
	}
}

// IntOrStringOneOf1AsIntOrString is a convenience function that returns IntOrStringOneOf1 wrapped in IntOrString
func IntOrStringOneOf1AsIntOrString(v *IntOrStringOneOf1) IntOrString {
	return IntOrString{
		IntOrStringOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntOrString) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IntOrStringOneOf
	err = newStrictDecoder(data).Decode(&dst.IntOrStringOneOf)
	if err == nil {
		jsonIntOrStringOneOf, _ := json.Marshal(dst.IntOrStringOneOf)
		if string(jsonIntOrStringOneOf) == "{}" { // empty struct
			dst.IntOrStringOneOf = nil
		} else {
			if err = validator.Validate(dst.IntOrStringOneOf); err != nil {
				dst.IntOrStringOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntOrStringOneOf = nil
	}

	// try to unmarshal data into IntOrStringOneOf1
	err = newStrictDecoder(data).Decode(&dst.IntOrStringOneOf1)
	if err == nil {
		jsonIntOrStringOneOf1, _ := json.Marshal(dst.IntOrStringOneOf1)
		if string(jsonIntOrStringOneOf1) == "{}" { // empty struct
			dst.IntOrStringOneOf1 = nil
		} else {
			if err = validator.Validate(dst.IntOrStringOneOf1); err != nil {
				dst.IntOrStringOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IntOrStringOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IntOrStringOneOf = nil
		dst.IntOrStringOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntOrString)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntOrString)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntOrString) MarshalJSON() ([]byte, error) {
	if src.IntOrStringOneOf != nil {
		return json.Marshal(&src.IntOrStringOneOf)
	}

	if src.IntOrStringOneOf1 != nil {
		return json.Marshal(&src.IntOrStringOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntOrString) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IntOrStringOneOf != nil {
		return obj.IntOrStringOneOf
	}

	if obj.IntOrStringOneOf1 != nil {
		return obj.IntOrStringOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableIntOrString struct {
	value *IntOrString
	isSet bool
}

func (v NullableIntOrString) Get() *IntOrString {
	return v.value
}

func (v *NullableIntOrString) Set(val *IntOrString) {
	v.value = val
	v.isSet = true
}

func (v NullableIntOrString) IsSet() bool {
	return v.isSet
}

func (v *NullableIntOrString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntOrString(val *IntOrString) *NullableIntOrString {
	return &NullableIntOrString{value: val, isSet: true}
}

func (v NullableIntOrString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntOrString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


