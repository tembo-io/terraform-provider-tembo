/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntOrStringOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntOrStringOneOf{}

// IntOrStringOneOf struct for IntOrStringOneOf
type IntOrStringOneOf struct {
	Int int32 `json:"Int"`
}

type _IntOrStringOneOf IntOrStringOneOf

// NewIntOrStringOneOf instantiates a new IntOrStringOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntOrStringOneOf(int_ int32) *IntOrStringOneOf {
	this := IntOrStringOneOf{}
	this.Int = int_
	return &this
}

// NewIntOrStringOneOfWithDefaults instantiates a new IntOrStringOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntOrStringOneOfWithDefaults() *IntOrStringOneOf {
	this := IntOrStringOneOf{}
	return &this
}

// GetInt returns the Int field value
func (o *IntOrStringOneOf) GetInt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Int
}

// GetIntOk returns a tuple with the Int field value
// and a boolean to check if the value has been set.
func (o *IntOrStringOneOf) GetIntOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Int, true
}

// SetInt sets field value
func (o *IntOrStringOneOf) SetInt(v int32) {
	o.Int = v
}

func (o IntOrStringOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntOrStringOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Int"] = o.Int
	return toSerialize, nil
}

func (o *IntOrStringOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Int",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntOrStringOneOf := _IntOrStringOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntOrStringOneOf)

	if err != nil {
		return err
	}

	*o = IntOrStringOneOf(varIntOrStringOneOf)

	return err
}

type NullableIntOrStringOneOf struct {
	value *IntOrStringOneOf
	isSet bool
}

func (v NullableIntOrStringOneOf) Get() *IntOrStringOneOf {
	return v.value
}

func (v *NullableIntOrStringOneOf) Set(val *IntOrStringOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIntOrStringOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIntOrStringOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntOrStringOneOf(val *IntOrStringOneOf) *NullableIntOrStringOneOf {
	return &NullableIntOrStringOneOf{value: val, isSet: true}
}

func (v NullableIntOrStringOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntOrStringOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


