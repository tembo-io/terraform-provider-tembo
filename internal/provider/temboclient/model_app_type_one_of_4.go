/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppTypeOneOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppTypeOneOf4{}

// AppTypeOneOf4 struct for AppTypeOneOf4
type AppTypeOneOf4 struct {
	Pganalyze NullableAppConfig `json:"pganalyze"`
}

type _AppTypeOneOf4 AppTypeOneOf4

// NewAppTypeOneOf4 instantiates a new AppTypeOneOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppTypeOneOf4(pganalyze NullableAppConfig) *AppTypeOneOf4 {
	this := AppTypeOneOf4{}
	this.Pganalyze = pganalyze
	return &this
}

// NewAppTypeOneOf4WithDefaults instantiates a new AppTypeOneOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppTypeOneOf4WithDefaults() *AppTypeOneOf4 {
	this := AppTypeOneOf4{}
	return &this
}

// GetPganalyze returns the Pganalyze field value
// If the value is explicit nil, the zero value for AppConfig will be returned
func (o *AppTypeOneOf4) GetPganalyze() AppConfig {
	if o == nil || o.Pganalyze.Get() == nil {
		var ret AppConfig
		return ret
	}

	return *o.Pganalyze.Get()
}

// GetPganalyzeOk returns a tuple with the Pganalyze field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppTypeOneOf4) GetPganalyzeOk() (*AppConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pganalyze.Get(), o.Pganalyze.IsSet()
}

// SetPganalyze sets field value
func (o *AppTypeOneOf4) SetPganalyze(v AppConfig) {
	o.Pganalyze.Set(&v)
}

func (o AppTypeOneOf4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppTypeOneOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pganalyze"] = o.Pganalyze.Get()
	return toSerialize, nil
}

func (o *AppTypeOneOf4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pganalyze",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppTypeOneOf4 := _AppTypeOneOf4{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppTypeOneOf4)

	if err != nil {
		return err
	}

	*o = AppTypeOneOf4(varAppTypeOneOf4)

	return err
}

type NullableAppTypeOneOf4 struct {
	value *AppTypeOneOf4
	isSet bool
}

func (v NullableAppTypeOneOf4) Get() *AppTypeOneOf4 {
	return v.value
}

func (v *NullableAppTypeOneOf4) Set(val *AppTypeOneOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableAppTypeOneOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableAppTypeOneOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppTypeOneOf4(val *AppTypeOneOf4) *NullableAppTypeOneOf4 {
	return &NullableAppTypeOneOf4{value: val, isSet: true}
}

func (v NullableAppTypeOneOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppTypeOneOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


