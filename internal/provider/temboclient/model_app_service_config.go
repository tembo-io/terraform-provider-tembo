/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
)

// checks if the AppServiceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppServiceConfig{}

// AppServiceConfig struct for AppServiceConfig
type AppServiceConfig struct {
	Env []EnvVar `json:"env,omitempty"`
}

// NewAppServiceConfig instantiates a new AppServiceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppServiceConfig() *AppServiceConfig {
	this := AppServiceConfig{}
	return &this
}

// NewAppServiceConfigWithDefaults instantiates a new AppServiceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppServiceConfigWithDefaults() *AppServiceConfig {
	this := AppServiceConfig{}
	return &this
}

// GetEnv returns the Env field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppServiceConfig) GetEnv() []EnvVar {
	if o == nil {
		var ret []EnvVar
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppServiceConfig) GetEnvOk() ([]EnvVar, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *AppServiceConfig) HasEnv() bool {
	if o != nil && IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []EnvVar and assigns it to the Env field.
func (o *AppServiceConfig) SetEnv(v []EnvVar) {
	o.Env = v
}

func (o AppServiceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppServiceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Env != nil {
		toSerialize["env"] = o.Env
	}
	return toSerialize, nil
}

type NullableAppServiceConfig struct {
	value *AppServiceConfig
	isSet bool
}

func (v NullableAppServiceConfig) Get() *AppServiceConfig {
	return v.value
}

func (v *NullableAppServiceConfig) Set(val *AppServiceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAppServiceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAppServiceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppServiceConfig(val *AppServiceConfig) *NullableAppServiceConfig {
	return &NullableAppServiceConfig{value: val, isSet: true}
}

func (v NullableAppServiceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppServiceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


