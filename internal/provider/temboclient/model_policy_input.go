/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the PolicyInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyInput{}

// PolicyInput struct for PolicyInput
type PolicyInput struct {
	// A valid Action ID. Available Action IDs include 'CreateInstance' and 'ManagePermissions'. Find all available Actions on the Actions API.
	Action string `json:"action"`
	// Whether the Action is allowed or not for the Role
	Allowed bool `json:"allowed"`
	// A valid Role ID. Available Role IDs include 'admin' and 'basic_member'.
	Role string `json:"role"`
	AdditionalProperties map[string]interface{}
}

type _PolicyInput PolicyInput

// NewPolicyInput instantiates a new PolicyInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyInput(action string, allowed bool, role string) *PolicyInput {
	this := PolicyInput{}
	this.Action = action
	this.Allowed = allowed
	this.Role = role
	return &this
}

// NewPolicyInputWithDefaults instantiates a new PolicyInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyInputWithDefaults() *PolicyInput {
	this := PolicyInput{}
	return &this
}

// GetAction returns the Action field value
func (o *PolicyInput) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PolicyInput) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PolicyInput) SetAction(v string) {
	o.Action = v
}

// GetAllowed returns the Allowed field value
func (o *PolicyInput) GetAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Allowed
}

// GetAllowedOk returns a tuple with the Allowed field value
// and a boolean to check if the value has been set.
func (o *PolicyInput) GetAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allowed, true
}

// SetAllowed sets field value
func (o *PolicyInput) SetAllowed(v bool) {
	o.Allowed = v
}

// GetRole returns the Role field value
func (o *PolicyInput) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PolicyInput) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PolicyInput) SetRole(v string) {
	o.Role = v
}

func (o PolicyInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["allowed"] = o.Allowed
	toSerialize["role"] = o.Role

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PolicyInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"allowed",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyInput := _PolicyInput{}

	err = json.Unmarshal(data, &varPolicyInput)

	if err != nil {
		return err
	}

	*o = PolicyInput(varPolicyInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "allowed")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePolicyInput struct {
	value *PolicyInput
	isSet bool
}

func (v NullablePolicyInput) Get() *PolicyInput {
	return v.value
}

func (v *NullablePolicyInput) Set(val *PolicyInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyInput(val *PolicyInput) *NullablePolicyInput {
	return &NullablePolicyInput{value: val, isSet: true}
}

func (v NullablePolicyInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


