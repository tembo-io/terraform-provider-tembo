/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the AskResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AskResult{}

// AskResult struct for AskResult
type AskResult struct {
	// The ask query. For example, \"how to create a Tembo instance\"
	ChatResponse string `json:"chat_response"`
	// an array of json objects referencing documents used to generate the response
	Context []SearchResponse `json:"context,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AskResult AskResult

// NewAskResult instantiates a new AskResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAskResult(chatResponse string) *AskResult {
	this := AskResult{}
	this.ChatResponse = chatResponse
	return &this
}

// NewAskResultWithDefaults instantiates a new AskResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAskResultWithDefaults() *AskResult {
	this := AskResult{}
	return &this
}

// GetChatResponse returns the ChatResponse field value
func (o *AskResult) GetChatResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChatResponse
}

// GetChatResponseOk returns a tuple with the ChatResponse field value
// and a boolean to check if the value has been set.
func (o *AskResult) GetChatResponseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChatResponse, true
}

// SetChatResponse sets field value
func (o *AskResult) SetChatResponse(v string) {
	o.ChatResponse = v
}

// GetContext returns the Context field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AskResult) GetContext() []SearchResponse {
	if o == nil {
		var ret []SearchResponse
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AskResult) GetContextOk() ([]SearchResponse, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *AskResult) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given []SearchResponse and assigns it to the Context field.
func (o *AskResult) SetContext(v []SearchResponse) {
	o.Context = v
}

func (o AskResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AskResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chat_response"] = o.ChatResponse
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AskResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chat_response",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAskResult := _AskResult{}

	err = json.Unmarshal(data, &varAskResult)

	if err != nil {
		return err
	}

	*o = AskResult(varAskResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chat_response")
		delete(additionalProperties, "context")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAskResult struct {
	value *AskResult
	isSet bool
}

func (v NullableAskResult) Get() *AskResult {
	return v.value
}

func (v *NullableAskResult) Set(val *AskResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAskResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAskResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAskResult(val *AskResult) *NullableAskResult {
	return &NullableAskResult{value: val, isSet: true}
}

func (v NullableAskResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAskResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


