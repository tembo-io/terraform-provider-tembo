/*
Tembo Cloud

Testing InstanceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package temboclient

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/tembo-io/terraform-provider-tembo/temboclient"
)

func Test_temboclient_InstanceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstanceAPIService CreateInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstanceAPI.CreateInstance(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService DeleteInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var instanceId string

		resp, httpRes, err := apiClient.InstanceAPI.DeleteInstance(context.Background(), orgId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService GetAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstanceAPI.GetAll(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService GetInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var instanceId string

		resp, httpRes, err := apiClient.InstanceAPI.GetInstance(context.Background(), orgId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService GetSchema", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InstanceAPI.GetSchema(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService InstanceEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var instanceId string

		resp, httpRes, err := apiClient.InstanceAPI.InstanceEvent(context.Background(), orgId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService PatchInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var instanceId string

		resp, httpRes, err := apiClient.InstanceAPI.PatchInstance(context.Background(), orgId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService PutInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string
		var instanceId string

		resp, httpRes, err := apiClient.InstanceAPI.PutInstance(context.Background(), orgId, instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstanceAPIService RestoreInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstanceAPI.RestoreInstance(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
