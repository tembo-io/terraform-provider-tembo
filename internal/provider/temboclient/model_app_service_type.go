/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// AppServiceType - struct for AppServiceType
type AppServiceType struct {
	AppServiceTypeOneOf *AppServiceTypeOneOf
}

// AppServiceTypeOneOfAsAppServiceType is a convenience function that returns AppServiceTypeOneOf wrapped in AppServiceType
func AppServiceTypeOneOfAsAppServiceType(v *AppServiceTypeOneOf) AppServiceType {
	return AppServiceType{
		AppServiceTypeOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppServiceType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppServiceTypeOneOf
	err = newStrictDecoder(data).Decode(&dst.AppServiceTypeOneOf)
	if err == nil {
		jsonAppServiceTypeOneOf, _ := json.Marshal(dst.AppServiceTypeOneOf)
		if string(jsonAppServiceTypeOneOf) == "{}" { // empty struct
			dst.AppServiceTypeOneOf = nil
		} else {
			match++
		}
	} else {
		dst.AppServiceTypeOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppServiceTypeOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppServiceType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppServiceType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppServiceType) MarshalJSON() ([]byte, error) {
	if src.AppServiceTypeOneOf != nil {
		return json.Marshal(&src.AppServiceTypeOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppServiceType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppServiceTypeOneOf != nil {
		return obj.AppServiceTypeOneOf
	}

	// all schemas are nil
	return nil
}

type NullableAppServiceType struct {
	value *AppServiceType
	isSet bool
}

func (v NullableAppServiceType) Get() *AppServiceType {
	return v.value
}

func (v *NullableAppServiceType) Set(val *AppServiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppServiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppServiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppServiceType(val *AppServiceType) *NullableAppServiceType {
	return &NullableAppServiceType{value: val, isSet: true}
}

func (v NullableAppServiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppServiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


