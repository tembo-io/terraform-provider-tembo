/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplacePathRegexConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplacePathRegexConfigType{}

// ReplacePathRegexConfigType struct for ReplacePathRegexConfigType
type ReplacePathRegexConfigType struct {
	Regex string `json:"regex"`
	Replacement string `json:"replacement"`
}

type _ReplacePathRegexConfigType ReplacePathRegexConfigType

// NewReplacePathRegexConfigType instantiates a new ReplacePathRegexConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplacePathRegexConfigType(regex string, replacement string) *ReplacePathRegexConfigType {
	this := ReplacePathRegexConfigType{}
	this.Regex = regex
	this.Replacement = replacement
	return &this
}

// NewReplacePathRegexConfigTypeWithDefaults instantiates a new ReplacePathRegexConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplacePathRegexConfigTypeWithDefaults() *ReplacePathRegexConfigType {
	this := ReplacePathRegexConfigType{}
	return &this
}

// GetRegex returns the Regex field value
func (o *ReplacePathRegexConfigType) GetRegex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Regex
}

// GetRegexOk returns a tuple with the Regex field value
// and a boolean to check if the value has been set.
func (o *ReplacePathRegexConfigType) GetRegexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Regex, true
}

// SetRegex sets field value
func (o *ReplacePathRegexConfigType) SetRegex(v string) {
	o.Regex = v
}

// GetReplacement returns the Replacement field value
func (o *ReplacePathRegexConfigType) GetReplacement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value
// and a boolean to check if the value has been set.
func (o *ReplacePathRegexConfigType) GetReplacementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replacement, true
}

// SetReplacement sets field value
func (o *ReplacePathRegexConfigType) SetReplacement(v string) {
	o.Replacement = v
}

func (o ReplacePathRegexConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplacePathRegexConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["regex"] = o.Regex
	toSerialize["replacement"] = o.Replacement
	return toSerialize, nil
}

func (o *ReplacePathRegexConfigType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"regex",
		"replacement",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplacePathRegexConfigType := _ReplacePathRegexConfigType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplacePathRegexConfigType)

	if err != nil {
		return err
	}

	*o = ReplacePathRegexConfigType(varReplacePathRegexConfigType)

	return err
}

type NullableReplacePathRegexConfigType struct {
	value *ReplacePathRegexConfigType
	isSet bool
}

func (v NullableReplacePathRegexConfigType) Get() *ReplacePathRegexConfigType {
	return v.value
}

func (v *NullableReplacePathRegexConfigType) Set(val *ReplacePathRegexConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableReplacePathRegexConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableReplacePathRegexConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplacePathRegexConfigType(val *ReplacePathRegexConfigType) *NullableReplacePathRegexConfigType {
	return &NullableReplacePathRegexConfigType{value: val, isSet: true}
}

func (v NullableReplacePathRegexConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplacePathRegexConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


