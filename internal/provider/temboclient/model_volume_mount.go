/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the VolumeMount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeMount{}

// VolumeMount struct for VolumeMount
type VolumeMount struct {
	MountPath string `json:"mount_path"`
	MountPropagation NullableString `json:"mount_propagation,omitempty"`
	Name string `json:"name"`
	ReadOnly NullableBool `json:"read_only,omitempty"`
	SubPath NullableString `json:"sub_path,omitempty"`
	SubPathExpr NullableString `json:"sub_path_expr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VolumeMount VolumeMount

// NewVolumeMount instantiates a new VolumeMount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeMount(mountPath string, name string) *VolumeMount {
	this := VolumeMount{}
	this.MountPath = mountPath
	this.Name = name
	return &this
}

// NewVolumeMountWithDefaults instantiates a new VolumeMount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeMountWithDefaults() *VolumeMount {
	this := VolumeMount{}
	return &this
}

// GetMountPath returns the MountPath field value
func (o *VolumeMount) GetMountPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
func (o *VolumeMount) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MountPath, true
}

// SetMountPath sets field value
func (o *VolumeMount) SetMountPath(v string) {
	o.MountPath = v
}

// GetMountPropagation returns the MountPropagation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeMount) GetMountPropagation() string {
	if o == nil || IsNil(o.MountPropagation.Get()) {
		var ret string
		return ret
	}
	return *o.MountPropagation.Get()
}

// GetMountPropagationOk returns a tuple with the MountPropagation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeMount) GetMountPropagationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPropagation.Get(), o.MountPropagation.IsSet()
}

// HasMountPropagation returns a boolean if a field has been set.
func (o *VolumeMount) HasMountPropagation() bool {
	if o != nil && o.MountPropagation.IsSet() {
		return true
	}

	return false
}

// SetMountPropagation gets a reference to the given NullableString and assigns it to the MountPropagation field.
func (o *VolumeMount) SetMountPropagation(v string) {
	o.MountPropagation.Set(&v)
}
// SetMountPropagationNil sets the value for MountPropagation to be an explicit nil
func (o *VolumeMount) SetMountPropagationNil() {
	o.MountPropagation.Set(nil)
}

// UnsetMountPropagation ensures that no value is present for MountPropagation, not even an explicit nil
func (o *VolumeMount) UnsetMountPropagation() {
	o.MountPropagation.Unset()
}

// GetName returns the Name field value
func (o *VolumeMount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeMount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeMount) SetName(v string) {
	o.Name = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeMount) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.ReadOnly.Get()
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeMount) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadOnly.Get(), o.ReadOnly.IsSet()
}

// HasReadOnly returns a boolean if a field has been set.
func (o *VolumeMount) HasReadOnly() bool {
	if o != nil && o.ReadOnly.IsSet() {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given NullableBool and assigns it to the ReadOnly field.
func (o *VolumeMount) SetReadOnly(v bool) {
	o.ReadOnly.Set(&v)
}
// SetReadOnlyNil sets the value for ReadOnly to be an explicit nil
func (o *VolumeMount) SetReadOnlyNil() {
	o.ReadOnly.Set(nil)
}

// UnsetReadOnly ensures that no value is present for ReadOnly, not even an explicit nil
func (o *VolumeMount) UnsetReadOnly() {
	o.ReadOnly.Unset()
}

// GetSubPath returns the SubPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeMount) GetSubPath() string {
	if o == nil || IsNil(o.SubPath.Get()) {
		var ret string
		return ret
	}
	return *o.SubPath.Get()
}

// GetSubPathOk returns a tuple with the SubPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeMount) GetSubPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubPath.Get(), o.SubPath.IsSet()
}

// HasSubPath returns a boolean if a field has been set.
func (o *VolumeMount) HasSubPath() bool {
	if o != nil && o.SubPath.IsSet() {
		return true
	}

	return false
}

// SetSubPath gets a reference to the given NullableString and assigns it to the SubPath field.
func (o *VolumeMount) SetSubPath(v string) {
	o.SubPath.Set(&v)
}
// SetSubPathNil sets the value for SubPath to be an explicit nil
func (o *VolumeMount) SetSubPathNil() {
	o.SubPath.Set(nil)
}

// UnsetSubPath ensures that no value is present for SubPath, not even an explicit nil
func (o *VolumeMount) UnsetSubPath() {
	o.SubPath.Unset()
}

// GetSubPathExpr returns the SubPathExpr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeMount) GetSubPathExpr() string {
	if o == nil || IsNil(o.SubPathExpr.Get()) {
		var ret string
		return ret
	}
	return *o.SubPathExpr.Get()
}

// GetSubPathExprOk returns a tuple with the SubPathExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeMount) GetSubPathExprOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubPathExpr.Get(), o.SubPathExpr.IsSet()
}

// HasSubPathExpr returns a boolean if a field has been set.
func (o *VolumeMount) HasSubPathExpr() bool {
	if o != nil && o.SubPathExpr.IsSet() {
		return true
	}

	return false
}

// SetSubPathExpr gets a reference to the given NullableString and assigns it to the SubPathExpr field.
func (o *VolumeMount) SetSubPathExpr(v string) {
	o.SubPathExpr.Set(&v)
}
// SetSubPathExprNil sets the value for SubPathExpr to be an explicit nil
func (o *VolumeMount) SetSubPathExprNil() {
	o.SubPathExpr.Set(nil)
}

// UnsetSubPathExpr ensures that no value is present for SubPathExpr, not even an explicit nil
func (o *VolumeMount) UnsetSubPathExpr() {
	o.SubPathExpr.Unset()
}

func (o VolumeMount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeMount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mount_path"] = o.MountPath
	if o.MountPropagation.IsSet() {
		toSerialize["mount_propagation"] = o.MountPropagation.Get()
	}
	toSerialize["name"] = o.Name
	if o.ReadOnly.IsSet() {
		toSerialize["read_only"] = o.ReadOnly.Get()
	}
	if o.SubPath.IsSet() {
		toSerialize["sub_path"] = o.SubPath.Get()
	}
	if o.SubPathExpr.IsSet() {
		toSerialize["sub_path_expr"] = o.SubPathExpr.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VolumeMount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mount_path",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeMount := _VolumeMount{}

	err = json.Unmarshal(data, &varVolumeMount)

	if err != nil {
		return err
	}

	*o = VolumeMount(varVolumeMount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mount_path")
		delete(additionalProperties, "mount_propagation")
		delete(additionalProperties, "name")
		delete(additionalProperties, "read_only")
		delete(additionalProperties, "sub_path")
		delete(additionalProperties, "sub_path_expr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVolumeMount struct {
	value *VolumeMount
	isSet bool
}

func (v NullableVolumeMount) Get() *VolumeMount {
	return v.value
}

func (v *NullableVolumeMount) Set(val *VolumeMount) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeMount) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeMount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeMount(val *VolumeMount) *NullableVolumeMount {
	return &NullableVolumeMount{value: val, isSet: true}
}

func (v NullableVolumeMount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeMount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


