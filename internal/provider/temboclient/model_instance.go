/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Instance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instance{}

// Instance struct for Instance
type Instance struct {
	AppServices []AppType `json:"app_services,omitempty"`
	ConnectionInfo NullableConnectionInfo `json:"connection_info,omitempty"`
	ConnectionPooler NullableConnectionPooler `json:"connection_pooler,omitempty"`
	Cpu Cpu `json:"cpu"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Environment Environment `json:"environment"`
	Extensions []ExtensionStatus `json:"extensions,omitempty"`
	ExtraDomainsRw []string `json:"extra_domains_rw,omitempty"`
	FirstRecoverabilityTime NullableTime `json:"first_recoverability_time,omitempty"`
	InstanceId string `json:"instance_id"`
	InstanceName string `json:"instance_name"`
	IpAllowList []string `json:"ip_allow_list,omitempty"`
	LastUpdatedAt *time.Time `json:"last_updated_at,omitempty"`
	Memory Memory `json:"memory"`
	OrganizationId string `json:"organization_id"`
	OrganizationName string `json:"organization_name"`
	PostgresConfigs []PgConfig `json:"postgres_configs,omitempty"`
	// Major Postgres version this instance is using. Currently: 14, 15 or 16
	PostgresVersion int32 `json:"postgres_version"`
	Replicas int32 `json:"replicas"`
	RuntimeConfig []PgConfig `json:"runtime_config,omitempty"`
	StackType StackType `json:"stack_type"`
	State State `json:"state"`
	Storage Storage `json:"storage"`
	TrunkInstalls []TrunkInstallStatus `json:"trunk_installs,omitempty"`
}

type _Instance Instance

// NewInstance instantiates a new Instance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstance(cpu Cpu, environment Environment, instanceId string, instanceName string, memory Memory, organizationId string, organizationName string, postgresVersion int32, replicas int32, stackType StackType, state State, storage Storage) *Instance {
	this := Instance{}
	this.Cpu = cpu
	this.Environment = environment
	this.InstanceId = instanceId
	this.InstanceName = instanceName
	this.Memory = memory
	this.OrganizationId = organizationId
	this.OrganizationName = organizationName
	this.PostgresVersion = postgresVersion
	this.Replicas = replicas
	this.StackType = stackType
	this.State = state
	this.Storage = storage
	return &this
}

// NewInstanceWithDefaults instantiates a new Instance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceWithDefaults() *Instance {
	this := Instance{}
	return &this
}

// GetAppServices returns the AppServices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetAppServices() []AppType {
	if o == nil {
		var ret []AppType
		return ret
	}
	return o.AppServices
}

// GetAppServicesOk returns a tuple with the AppServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetAppServicesOk() ([]AppType, bool) {
	if o == nil || IsNil(o.AppServices) {
		return nil, false
	}
	return o.AppServices, true
}

// HasAppServices returns a boolean if a field has been set.
func (o *Instance) HasAppServices() bool {
	if o != nil && !IsNil(o.AppServices) {
		return true
	}

	return false
}

// SetAppServices gets a reference to the given []AppType and assigns it to the AppServices field.
func (o *Instance) SetAppServices(v []AppType) {
	o.AppServices = v
}

// GetConnectionInfo returns the ConnectionInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetConnectionInfo() ConnectionInfo {
	if o == nil || IsNil(o.ConnectionInfo.Get()) {
		var ret ConnectionInfo
		return ret
	}
	return *o.ConnectionInfo.Get()
}

// GetConnectionInfoOk returns a tuple with the ConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetConnectionInfoOk() (*ConnectionInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionInfo.Get(), o.ConnectionInfo.IsSet()
}

// HasConnectionInfo returns a boolean if a field has been set.
func (o *Instance) HasConnectionInfo() bool {
	if o != nil && o.ConnectionInfo.IsSet() {
		return true
	}

	return false
}

// SetConnectionInfo gets a reference to the given NullableConnectionInfo and assigns it to the ConnectionInfo field.
func (o *Instance) SetConnectionInfo(v ConnectionInfo) {
	o.ConnectionInfo.Set(&v)
}
// SetConnectionInfoNil sets the value for ConnectionInfo to be an explicit nil
func (o *Instance) SetConnectionInfoNil() {
	o.ConnectionInfo.Set(nil)
}

// UnsetConnectionInfo ensures that no value is present for ConnectionInfo, not even an explicit nil
func (o *Instance) UnsetConnectionInfo() {
	o.ConnectionInfo.Unset()
}

// GetConnectionPooler returns the ConnectionPooler field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetConnectionPooler() ConnectionPooler {
	if o == nil || IsNil(o.ConnectionPooler.Get()) {
		var ret ConnectionPooler
		return ret
	}
	return *o.ConnectionPooler.Get()
}

// GetConnectionPoolerOk returns a tuple with the ConnectionPooler field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetConnectionPoolerOk() (*ConnectionPooler, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionPooler.Get(), o.ConnectionPooler.IsSet()
}

// HasConnectionPooler returns a boolean if a field has been set.
func (o *Instance) HasConnectionPooler() bool {
	if o != nil && o.ConnectionPooler.IsSet() {
		return true
	}

	return false
}

// SetConnectionPooler gets a reference to the given NullableConnectionPooler and assigns it to the ConnectionPooler field.
func (o *Instance) SetConnectionPooler(v ConnectionPooler) {
	o.ConnectionPooler.Set(&v)
}
// SetConnectionPoolerNil sets the value for ConnectionPooler to be an explicit nil
func (o *Instance) SetConnectionPoolerNil() {
	o.ConnectionPooler.Set(nil)
}

// UnsetConnectionPooler ensures that no value is present for ConnectionPooler, not even an explicit nil
func (o *Instance) UnsetConnectionPooler() {
	o.ConnectionPooler.Unset()
}

// GetCpu returns the Cpu field value
func (o *Instance) GetCpu() Cpu {
	if o == nil {
		var ret Cpu
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *Instance) GetCpuOk() (*Cpu, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *Instance) SetCpu(v Cpu) {
	o.Cpu = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Instance) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Instance) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Instance) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEnvironment returns the Environment field value
func (o *Instance) GetEnvironment() Environment {
	if o == nil {
		var ret Environment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *Instance) GetEnvironmentOk() (*Environment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *Instance) SetEnvironment(v Environment) {
	o.Environment = v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetExtensions() []ExtensionStatus {
	if o == nil {
		var ret []ExtensionStatus
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetExtensionsOk() ([]ExtensionStatus, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Instance) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []ExtensionStatus and assigns it to the Extensions field.
func (o *Instance) SetExtensions(v []ExtensionStatus) {
	o.Extensions = v
}

// GetExtraDomainsRw returns the ExtraDomainsRw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetExtraDomainsRw() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExtraDomainsRw
}

// GetExtraDomainsRwOk returns a tuple with the ExtraDomainsRw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetExtraDomainsRwOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtraDomainsRw) {
		return nil, false
	}
	return o.ExtraDomainsRw, true
}

// HasExtraDomainsRw returns a boolean if a field has been set.
func (o *Instance) HasExtraDomainsRw() bool {
	if o != nil && !IsNil(o.ExtraDomainsRw) {
		return true
	}

	return false
}

// SetExtraDomainsRw gets a reference to the given []string and assigns it to the ExtraDomainsRw field.
func (o *Instance) SetExtraDomainsRw(v []string) {
	o.ExtraDomainsRw = v
}

// GetFirstRecoverabilityTime returns the FirstRecoverabilityTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetFirstRecoverabilityTime() time.Time {
	if o == nil || IsNil(o.FirstRecoverabilityTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FirstRecoverabilityTime.Get()
}

// GetFirstRecoverabilityTimeOk returns a tuple with the FirstRecoverabilityTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetFirstRecoverabilityTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstRecoverabilityTime.Get(), o.FirstRecoverabilityTime.IsSet()
}

// HasFirstRecoverabilityTime returns a boolean if a field has been set.
func (o *Instance) HasFirstRecoverabilityTime() bool {
	if o != nil && o.FirstRecoverabilityTime.IsSet() {
		return true
	}

	return false
}

// SetFirstRecoverabilityTime gets a reference to the given NullableTime and assigns it to the FirstRecoverabilityTime field.
func (o *Instance) SetFirstRecoverabilityTime(v time.Time) {
	o.FirstRecoverabilityTime.Set(&v)
}
// SetFirstRecoverabilityTimeNil sets the value for FirstRecoverabilityTime to be an explicit nil
func (o *Instance) SetFirstRecoverabilityTimeNil() {
	o.FirstRecoverabilityTime.Set(nil)
}

// UnsetFirstRecoverabilityTime ensures that no value is present for FirstRecoverabilityTime, not even an explicit nil
func (o *Instance) UnsetFirstRecoverabilityTime() {
	o.FirstRecoverabilityTime.Unset()
}

// GetInstanceId returns the InstanceId field value
func (o *Instance) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *Instance) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *Instance) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetInstanceName returns the InstanceName field value
func (o *Instance) GetInstanceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value
// and a boolean to check if the value has been set.
func (o *Instance) GetInstanceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceName, true
}

// SetInstanceName sets field value
func (o *Instance) SetInstanceName(v string) {
	o.InstanceName = v
}

// GetIpAllowList returns the IpAllowList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetIpAllowList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IpAllowList
}

// GetIpAllowListOk returns a tuple with the IpAllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetIpAllowListOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAllowList) {
		return nil, false
	}
	return o.IpAllowList, true
}

// HasIpAllowList returns a boolean if a field has been set.
func (o *Instance) HasIpAllowList() bool {
	if o != nil && !IsNil(o.IpAllowList) {
		return true
	}

	return false
}

// SetIpAllowList gets a reference to the given []string and assigns it to the IpAllowList field.
func (o *Instance) SetIpAllowList(v []string) {
	o.IpAllowList = v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value if set, zero value otherwise.
func (o *Instance) GetLastUpdatedAt() time.Time {
	if o == nil || IsNil(o.LastUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instance) GetLastUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAt) {
		return nil, false
	}
	return o.LastUpdatedAt, true
}

// HasLastUpdatedAt returns a boolean if a field has been set.
func (o *Instance) HasLastUpdatedAt() bool {
	if o != nil && !IsNil(o.LastUpdatedAt) {
		return true
	}

	return false
}

// SetLastUpdatedAt gets a reference to the given time.Time and assigns it to the LastUpdatedAt field.
func (o *Instance) SetLastUpdatedAt(v time.Time) {
	o.LastUpdatedAt = &v
}

// GetMemory returns the Memory field value
func (o *Instance) GetMemory() Memory {
	if o == nil {
		var ret Memory
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *Instance) GetMemoryOk() (*Memory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *Instance) SetMemory(v Memory) {
	o.Memory = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *Instance) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *Instance) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *Instance) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetOrganizationName returns the OrganizationName field value
func (o *Instance) GetOrganizationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
func (o *Instance) GetOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationName, true
}

// SetOrganizationName sets field value
func (o *Instance) SetOrganizationName(v string) {
	o.OrganizationName = v
}

// GetPostgresConfigs returns the PostgresConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetPostgresConfigs() []PgConfig {
	if o == nil {
		var ret []PgConfig
		return ret
	}
	return o.PostgresConfigs
}

// GetPostgresConfigsOk returns a tuple with the PostgresConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetPostgresConfigsOk() ([]PgConfig, bool) {
	if o == nil || IsNil(o.PostgresConfigs) {
		return nil, false
	}
	return o.PostgresConfigs, true
}

// HasPostgresConfigs returns a boolean if a field has been set.
func (o *Instance) HasPostgresConfigs() bool {
	if o != nil && !IsNil(o.PostgresConfigs) {
		return true
	}

	return false
}

// SetPostgresConfigs gets a reference to the given []PgConfig and assigns it to the PostgresConfigs field.
func (o *Instance) SetPostgresConfigs(v []PgConfig) {
	o.PostgresConfigs = v
}

// GetPostgresVersion returns the PostgresVersion field value
func (o *Instance) GetPostgresVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PostgresVersion
}

// GetPostgresVersionOk returns a tuple with the PostgresVersion field value
// and a boolean to check if the value has been set.
func (o *Instance) GetPostgresVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostgresVersion, true
}

// SetPostgresVersion sets field value
func (o *Instance) SetPostgresVersion(v int32) {
	o.PostgresVersion = v
}

// GetReplicas returns the Replicas field value
func (o *Instance) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *Instance) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *Instance) SetReplicas(v int32) {
	o.Replicas = v
}

// GetRuntimeConfig returns the RuntimeConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetRuntimeConfig() []PgConfig {
	if o == nil {
		var ret []PgConfig
		return ret
	}
	return o.RuntimeConfig
}

// GetRuntimeConfigOk returns a tuple with the RuntimeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetRuntimeConfigOk() ([]PgConfig, bool) {
	if o == nil || IsNil(o.RuntimeConfig) {
		return nil, false
	}
	return o.RuntimeConfig, true
}

// HasRuntimeConfig returns a boolean if a field has been set.
func (o *Instance) HasRuntimeConfig() bool {
	if o != nil && !IsNil(o.RuntimeConfig) {
		return true
	}

	return false
}

// SetRuntimeConfig gets a reference to the given []PgConfig and assigns it to the RuntimeConfig field.
func (o *Instance) SetRuntimeConfig(v []PgConfig) {
	o.RuntimeConfig = v
}

// GetStackType returns the StackType field value
func (o *Instance) GetStackType() StackType {
	if o == nil {
		var ret StackType
		return ret
	}

	return o.StackType
}

// GetStackTypeOk returns a tuple with the StackType field value
// and a boolean to check if the value has been set.
func (o *Instance) GetStackTypeOk() (*StackType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackType, true
}

// SetStackType sets field value
func (o *Instance) SetStackType(v StackType) {
	o.StackType = v
}

// GetState returns the State field value
func (o *Instance) GetState() State {
	if o == nil {
		var ret State
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Instance) GetStateOk() (*State, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Instance) SetState(v State) {
	o.State = v
}

// GetStorage returns the Storage field value
func (o *Instance) GetStorage() Storage {
	if o == nil {
		var ret Storage
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *Instance) GetStorageOk() (*Storage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *Instance) SetStorage(v Storage) {
	o.Storage = v
}

// GetTrunkInstalls returns the TrunkInstalls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Instance) GetTrunkInstalls() []TrunkInstallStatus {
	if o == nil {
		var ret []TrunkInstallStatus
		return ret
	}
	return o.TrunkInstalls
}

// GetTrunkInstallsOk returns a tuple with the TrunkInstalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Instance) GetTrunkInstallsOk() ([]TrunkInstallStatus, bool) {
	if o == nil || IsNil(o.TrunkInstalls) {
		return nil, false
	}
	return o.TrunkInstalls, true
}

// HasTrunkInstalls returns a boolean if a field has been set.
func (o *Instance) HasTrunkInstalls() bool {
	if o != nil && !IsNil(o.TrunkInstalls) {
		return true
	}

	return false
}

// SetTrunkInstalls gets a reference to the given []TrunkInstallStatus and assigns it to the TrunkInstalls field.
func (o *Instance) SetTrunkInstalls(v []TrunkInstallStatus) {
	o.TrunkInstalls = v
}

func (o Instance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppServices != nil {
		toSerialize["app_services"] = o.AppServices
	}
	if o.ConnectionInfo.IsSet() {
		toSerialize["connection_info"] = o.ConnectionInfo.Get()
	}
	if o.ConnectionPooler.IsSet() {
		toSerialize["connection_pooler"] = o.ConnectionPooler.Get()
	}
	toSerialize["cpu"] = o.Cpu
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["environment"] = o.Environment
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.ExtraDomainsRw != nil {
		toSerialize["extra_domains_rw"] = o.ExtraDomainsRw
	}
	if o.FirstRecoverabilityTime.IsSet() {
		toSerialize["first_recoverability_time"] = o.FirstRecoverabilityTime.Get()
	}
	toSerialize["instance_id"] = o.InstanceId
	toSerialize["instance_name"] = o.InstanceName
	if o.IpAllowList != nil {
		toSerialize["ip_allow_list"] = o.IpAllowList
	}
	if !IsNil(o.LastUpdatedAt) {
		toSerialize["last_updated_at"] = o.LastUpdatedAt
	}
	toSerialize["memory"] = o.Memory
	toSerialize["organization_id"] = o.OrganizationId
	toSerialize["organization_name"] = o.OrganizationName
	if o.PostgresConfigs != nil {
		toSerialize["postgres_configs"] = o.PostgresConfigs
	}
	toSerialize["postgres_version"] = o.PostgresVersion
	toSerialize["replicas"] = o.Replicas
	if o.RuntimeConfig != nil {
		toSerialize["runtime_config"] = o.RuntimeConfig
	}
	toSerialize["stack_type"] = o.StackType
	toSerialize["state"] = o.State
	toSerialize["storage"] = o.Storage
	if o.TrunkInstalls != nil {
		toSerialize["trunk_installs"] = o.TrunkInstalls
	}
	return toSerialize, nil
}

func (o *Instance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"environment",
		"instance_id",
		"instance_name",
		"memory",
		"organization_id",
		"organization_name",
		"postgres_version",
		"replicas",
		"stack_type",
		"state",
		"storage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstance := _Instance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstance)

	if err != nil {
		return err
	}

	*o = Instance(varInstance)

	return err
}

type NullableInstance struct {
	value *Instance
	isSet bool
}

func (v NullableInstance) Get() *Instance {
	return v.value
}

func (v *NullableInstance) Set(val *Instance) {
	v.value = val
	v.isSet = true
}

func (v NullableInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstance(val *Instance) *NullableInstance {
	return &NullableInstance{value: val, isSet: true}
}

func (v NullableInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


