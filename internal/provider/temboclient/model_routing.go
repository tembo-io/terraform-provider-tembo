/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Routing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Routing{}

// Routing Routing is used if there is a routing port, then a service is created using that Port when ingress_path is present, an ingress is created. Otherwise, no ingress is created
type Routing struct {
	EntryPoints []string `json:"entryPoints,omitempty"`
	IngressPath NullableString `json:"ingressPath,omitempty"`
	IngressType NullableIngressType `json:"ingressType,omitempty"`
	// provide name of the middleware resources to apply to this route
	Middlewares []string `json:"middlewares,omitempty"`
	Port int32 `json:"port"`
}

type _Routing Routing

// NewRouting instantiates a new Routing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouting(port int32) *Routing {
	this := Routing{}
	this.Port = port
	return &this
}

// NewRoutingWithDefaults instantiates a new Routing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingWithDefaults() *Routing {
	this := Routing{}
	return &this
}

// GetEntryPoints returns the EntryPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Routing) GetEntryPoints() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EntryPoints
}

// GetEntryPointsOk returns a tuple with the EntryPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Routing) GetEntryPointsOk() ([]string, bool) {
	if o == nil || IsNil(o.EntryPoints) {
		return nil, false
	}
	return o.EntryPoints, true
}

// HasEntryPoints returns a boolean if a field has been set.
func (o *Routing) HasEntryPoints() bool {
	if o != nil && IsNil(o.EntryPoints) {
		return true
	}

	return false
}

// SetEntryPoints gets a reference to the given []string and assigns it to the EntryPoints field.
func (o *Routing) SetEntryPoints(v []string) {
	o.EntryPoints = v
}

// GetIngressPath returns the IngressPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Routing) GetIngressPath() string {
	if o == nil || IsNil(o.IngressPath.Get()) {
		var ret string
		return ret
	}
	return *o.IngressPath.Get()
}

// GetIngressPathOk returns a tuple with the IngressPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Routing) GetIngressPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IngressPath.Get(), o.IngressPath.IsSet()
}

// HasIngressPath returns a boolean if a field has been set.
func (o *Routing) HasIngressPath() bool {
	if o != nil && o.IngressPath.IsSet() {
		return true
	}

	return false
}

// SetIngressPath gets a reference to the given NullableString and assigns it to the IngressPath field.
func (o *Routing) SetIngressPath(v string) {
	o.IngressPath.Set(&v)
}
// SetIngressPathNil sets the value for IngressPath to be an explicit nil
func (o *Routing) SetIngressPathNil() {
	o.IngressPath.Set(nil)
}

// UnsetIngressPath ensures that no value is present for IngressPath, not even an explicit nil
func (o *Routing) UnsetIngressPath() {
	o.IngressPath.Unset()
}

// GetIngressType returns the IngressType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Routing) GetIngressType() IngressType {
	if o == nil || IsNil(o.IngressType.Get()) {
		var ret IngressType
		return ret
	}
	return *o.IngressType.Get()
}

// GetIngressTypeOk returns a tuple with the IngressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Routing) GetIngressTypeOk() (*IngressType, bool) {
	if o == nil {
		return nil, false
	}
	return o.IngressType.Get(), o.IngressType.IsSet()
}

// HasIngressType returns a boolean if a field has been set.
func (o *Routing) HasIngressType() bool {
	if o != nil && o.IngressType.IsSet() {
		return true
	}

	return false
}

// SetIngressType gets a reference to the given NullableIngressType and assigns it to the IngressType field.
func (o *Routing) SetIngressType(v IngressType) {
	o.IngressType.Set(&v)
}
// SetIngressTypeNil sets the value for IngressType to be an explicit nil
func (o *Routing) SetIngressTypeNil() {
	o.IngressType.Set(nil)
}

// UnsetIngressType ensures that no value is present for IngressType, not even an explicit nil
func (o *Routing) UnsetIngressType() {
	o.IngressType.Unset()
}

// GetMiddlewares returns the Middlewares field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Routing) GetMiddlewares() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Middlewares
}

// GetMiddlewaresOk returns a tuple with the Middlewares field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Routing) GetMiddlewaresOk() ([]string, bool) {
	if o == nil || IsNil(o.Middlewares) {
		return nil, false
	}
	return o.Middlewares, true
}

// HasMiddlewares returns a boolean if a field has been set.
func (o *Routing) HasMiddlewares() bool {
	if o != nil && IsNil(o.Middlewares) {
		return true
	}

	return false
}

// SetMiddlewares gets a reference to the given []string and assigns it to the Middlewares field.
func (o *Routing) SetMiddlewares(v []string) {
	o.Middlewares = v
}

// GetPort returns the Port field value
func (o *Routing) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *Routing) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *Routing) SetPort(v int32) {
	o.Port = v
}

func (o Routing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Routing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EntryPoints != nil {
		toSerialize["entryPoints"] = o.EntryPoints
	}
	if o.IngressPath.IsSet() {
		toSerialize["ingressPath"] = o.IngressPath.Get()
	}
	if o.IngressType.IsSet() {
		toSerialize["ingressType"] = o.IngressType.Get()
	}
	if o.Middlewares != nil {
		toSerialize["middlewares"] = o.Middlewares
	}
	toSerialize["port"] = o.Port
	return toSerialize, nil
}

func (o *Routing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouting := _Routing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouting)

	if err != nil {
		return err
	}

	*o = Routing(varRouting)

	return err
}

type NullableRouting struct {
	value *Routing
	isSet bool
}

func (v NullableRouting) Get() *Routing {
	return v.value
}

func (v *NullableRouting) Set(val *Routing) {
	v.value = val
	v.isSet = true
}

func (v NullableRouting) IsSet() bool {
	return v.isSet
}

func (v *NullableRouting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouting(val *Routing) *NullableRouting {
	return &NullableRouting{value: val, isSet: true}
}

func (v NullableRouting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


