/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInstance{}

// CreateInstance struct for CreateInstance
type CreateInstance struct {
	AppServices []AppType `json:"app_services,omitempty"`
	Autoscaling NullablePatchAutoscaling `json:"autoscaling,omitempty"`
	ConnectionPooler NullableConnectionPooler `json:"connection_pooler,omitempty"`
	Cpu Cpu `json:"cpu"`
	DedicatedNetworking NullableDedicatedNetworking `json:"dedicated_networking,omitempty"`
	Environment Environment `json:"environment"`
	Experimental NullableExperimental `json:"experimental,omitempty"`
	Extensions []Extension `json:"extensions,omitempty"`
	ExtraDomainsRw []string `json:"extra_domains_rw,omitempty"`
	InstanceName string `json:"instance_name"`
	IpAllowList []string `json:"ip_allow_list,omitempty"`
	Memory Memory `json:"memory"`
	PgVersion *int32 `json:"pg_version,omitempty"`
	PostgresConfigs []PgConfig `json:"postgres_configs,omitempty"`
	ProviderId *string `json:"provider_id,omitempty"`
	RegionId *string `json:"region_id,omitempty"`
	Replicas *int32 `json:"replicas,omitempty"`
	Spot NullableBool `json:"spot,omitempty"`
	StackType StackType `json:"stack_type"`
	Storage Storage `json:"storage"`
	TrunkInstalls []TrunkInstall `json:"trunk_installs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateInstance CreateInstance

// NewCreateInstance instantiates a new CreateInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInstance(cpu Cpu, environment Environment, instanceName string, memory Memory, stackType StackType, storage Storage) *CreateInstance {
	this := CreateInstance{}
	this.Cpu = cpu
	this.Environment = environment
	this.InstanceName = instanceName
	this.Memory = memory
	this.StackType = stackType
	this.Storage = storage
	return &this
}

// NewCreateInstanceWithDefaults instantiates a new CreateInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInstanceWithDefaults() *CreateInstance {
	this := CreateInstance{}
	return &this
}

// GetAppServices returns the AppServices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetAppServices() []AppType {
	if o == nil {
		var ret []AppType
		return ret
	}
	return o.AppServices
}

// GetAppServicesOk returns a tuple with the AppServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetAppServicesOk() ([]AppType, bool) {
	if o == nil || IsNil(o.AppServices) {
		return nil, false
	}
	return o.AppServices, true
}

// HasAppServices returns a boolean if a field has been set.
func (o *CreateInstance) HasAppServices() bool {
	if o != nil && !IsNil(o.AppServices) {
		return true
	}

	return false
}

// SetAppServices gets a reference to the given []AppType and assigns it to the AppServices field.
func (o *CreateInstance) SetAppServices(v []AppType) {
	o.AppServices = v
}

// GetAutoscaling returns the Autoscaling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetAutoscaling() PatchAutoscaling {
	if o == nil || IsNil(o.Autoscaling.Get()) {
		var ret PatchAutoscaling
		return ret
	}
	return *o.Autoscaling.Get()
}

// GetAutoscalingOk returns a tuple with the Autoscaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetAutoscalingOk() (*PatchAutoscaling, bool) {
	if o == nil {
		return nil, false
	}
	return o.Autoscaling.Get(), o.Autoscaling.IsSet()
}

// HasAutoscaling returns a boolean if a field has been set.
func (o *CreateInstance) HasAutoscaling() bool {
	if o != nil && o.Autoscaling.IsSet() {
		return true
	}

	return false
}

// SetAutoscaling gets a reference to the given NullablePatchAutoscaling and assigns it to the Autoscaling field.
func (o *CreateInstance) SetAutoscaling(v PatchAutoscaling) {
	o.Autoscaling.Set(&v)
}
// SetAutoscalingNil sets the value for Autoscaling to be an explicit nil
func (o *CreateInstance) SetAutoscalingNil() {
	o.Autoscaling.Set(nil)
}

// UnsetAutoscaling ensures that no value is present for Autoscaling, not even an explicit nil
func (o *CreateInstance) UnsetAutoscaling() {
	o.Autoscaling.Unset()
}

// GetConnectionPooler returns the ConnectionPooler field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetConnectionPooler() ConnectionPooler {
	if o == nil || IsNil(o.ConnectionPooler.Get()) {
		var ret ConnectionPooler
		return ret
	}
	return *o.ConnectionPooler.Get()
}

// GetConnectionPoolerOk returns a tuple with the ConnectionPooler field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetConnectionPoolerOk() (*ConnectionPooler, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionPooler.Get(), o.ConnectionPooler.IsSet()
}

// HasConnectionPooler returns a boolean if a field has been set.
func (o *CreateInstance) HasConnectionPooler() bool {
	if o != nil && o.ConnectionPooler.IsSet() {
		return true
	}

	return false
}

// SetConnectionPooler gets a reference to the given NullableConnectionPooler and assigns it to the ConnectionPooler field.
func (o *CreateInstance) SetConnectionPooler(v ConnectionPooler) {
	o.ConnectionPooler.Set(&v)
}
// SetConnectionPoolerNil sets the value for ConnectionPooler to be an explicit nil
func (o *CreateInstance) SetConnectionPoolerNil() {
	o.ConnectionPooler.Set(nil)
}

// UnsetConnectionPooler ensures that no value is present for ConnectionPooler, not even an explicit nil
func (o *CreateInstance) UnsetConnectionPooler() {
	o.ConnectionPooler.Unset()
}

// GetCpu returns the Cpu field value
func (o *CreateInstance) GetCpu() Cpu {
	if o == nil {
		var ret Cpu
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetCpuOk() (*Cpu, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *CreateInstance) SetCpu(v Cpu) {
	o.Cpu = v
}

// GetDedicatedNetworking returns the DedicatedNetworking field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetDedicatedNetworking() DedicatedNetworking {
	if o == nil || IsNil(o.DedicatedNetworking.Get()) {
		var ret DedicatedNetworking
		return ret
	}
	return *o.DedicatedNetworking.Get()
}

// GetDedicatedNetworkingOk returns a tuple with the DedicatedNetworking field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetDedicatedNetworkingOk() (*DedicatedNetworking, bool) {
	if o == nil {
		return nil, false
	}
	return o.DedicatedNetworking.Get(), o.DedicatedNetworking.IsSet()
}

// HasDedicatedNetworking returns a boolean if a field has been set.
func (o *CreateInstance) HasDedicatedNetworking() bool {
	if o != nil && o.DedicatedNetworking.IsSet() {
		return true
	}

	return false
}

// SetDedicatedNetworking gets a reference to the given NullableDedicatedNetworking and assigns it to the DedicatedNetworking field.
func (o *CreateInstance) SetDedicatedNetworking(v DedicatedNetworking) {
	o.DedicatedNetworking.Set(&v)
}
// SetDedicatedNetworkingNil sets the value for DedicatedNetworking to be an explicit nil
func (o *CreateInstance) SetDedicatedNetworkingNil() {
	o.DedicatedNetworking.Set(nil)
}

// UnsetDedicatedNetworking ensures that no value is present for DedicatedNetworking, not even an explicit nil
func (o *CreateInstance) UnsetDedicatedNetworking() {
	o.DedicatedNetworking.Unset()
}

// GetEnvironment returns the Environment field value
func (o *CreateInstance) GetEnvironment() Environment {
	if o == nil {
		var ret Environment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetEnvironmentOk() (*Environment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *CreateInstance) SetEnvironment(v Environment) {
	o.Environment = v
}

// GetExperimental returns the Experimental field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetExperimental() Experimental {
	if o == nil || IsNil(o.Experimental.Get()) {
		var ret Experimental
		return ret
	}
	return *o.Experimental.Get()
}

// GetExperimentalOk returns a tuple with the Experimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetExperimentalOk() (*Experimental, bool) {
	if o == nil {
		return nil, false
	}
	return o.Experimental.Get(), o.Experimental.IsSet()
}

// HasExperimental returns a boolean if a field has been set.
func (o *CreateInstance) HasExperimental() bool {
	if o != nil && o.Experimental.IsSet() {
		return true
	}

	return false
}

// SetExperimental gets a reference to the given NullableExperimental and assigns it to the Experimental field.
func (o *CreateInstance) SetExperimental(v Experimental) {
	o.Experimental.Set(&v)
}
// SetExperimentalNil sets the value for Experimental to be an explicit nil
func (o *CreateInstance) SetExperimentalNil() {
	o.Experimental.Set(nil)
}

// UnsetExperimental ensures that no value is present for Experimental, not even an explicit nil
func (o *CreateInstance) UnsetExperimental() {
	o.Experimental.Unset()
}

// GetExtensions returns the Extensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetExtensions() []Extension {
	if o == nil {
		var ret []Extension
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetExtensionsOk() ([]Extension, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *CreateInstance) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []Extension and assigns it to the Extensions field.
func (o *CreateInstance) SetExtensions(v []Extension) {
	o.Extensions = v
}

// GetExtraDomainsRw returns the ExtraDomainsRw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetExtraDomainsRw() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExtraDomainsRw
}

// GetExtraDomainsRwOk returns a tuple with the ExtraDomainsRw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetExtraDomainsRwOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtraDomainsRw) {
		return nil, false
	}
	return o.ExtraDomainsRw, true
}

// HasExtraDomainsRw returns a boolean if a field has been set.
func (o *CreateInstance) HasExtraDomainsRw() bool {
	if o != nil && !IsNil(o.ExtraDomainsRw) {
		return true
	}

	return false
}

// SetExtraDomainsRw gets a reference to the given []string and assigns it to the ExtraDomainsRw field.
func (o *CreateInstance) SetExtraDomainsRw(v []string) {
	o.ExtraDomainsRw = v
}

// GetInstanceName returns the InstanceName field value
func (o *CreateInstance) GetInstanceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetInstanceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceName, true
}

// SetInstanceName sets field value
func (o *CreateInstance) SetInstanceName(v string) {
	o.InstanceName = v
}

// GetIpAllowList returns the IpAllowList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetIpAllowList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IpAllowList
}

// GetIpAllowListOk returns a tuple with the IpAllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetIpAllowListOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAllowList) {
		return nil, false
	}
	return o.IpAllowList, true
}

// HasIpAllowList returns a boolean if a field has been set.
func (o *CreateInstance) HasIpAllowList() bool {
	if o != nil && !IsNil(o.IpAllowList) {
		return true
	}

	return false
}

// SetIpAllowList gets a reference to the given []string and assigns it to the IpAllowList field.
func (o *CreateInstance) SetIpAllowList(v []string) {
	o.IpAllowList = v
}

// GetMemory returns the Memory field value
func (o *CreateInstance) GetMemory() Memory {
	if o == nil {
		var ret Memory
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetMemoryOk() (*Memory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *CreateInstance) SetMemory(v Memory) {
	o.Memory = v
}

// GetPgVersion returns the PgVersion field value if set, zero value otherwise.
func (o *CreateInstance) GetPgVersion() int32 {
	if o == nil || IsNil(o.PgVersion) {
		var ret int32
		return ret
	}
	return *o.PgVersion
}

// GetPgVersionOk returns a tuple with the PgVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetPgVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.PgVersion) {
		return nil, false
	}
	return o.PgVersion, true
}

// HasPgVersion returns a boolean if a field has been set.
func (o *CreateInstance) HasPgVersion() bool {
	if o != nil && !IsNil(o.PgVersion) {
		return true
	}

	return false
}

// SetPgVersion gets a reference to the given int32 and assigns it to the PgVersion field.
func (o *CreateInstance) SetPgVersion(v int32) {
	o.PgVersion = &v
}

// GetPostgresConfigs returns the PostgresConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetPostgresConfigs() []PgConfig {
	if o == nil {
		var ret []PgConfig
		return ret
	}
	return o.PostgresConfigs
}

// GetPostgresConfigsOk returns a tuple with the PostgresConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetPostgresConfigsOk() ([]PgConfig, bool) {
	if o == nil || IsNil(o.PostgresConfigs) {
		return nil, false
	}
	return o.PostgresConfigs, true
}

// HasPostgresConfigs returns a boolean if a field has been set.
func (o *CreateInstance) HasPostgresConfigs() bool {
	if o != nil && !IsNil(o.PostgresConfigs) {
		return true
	}

	return false
}

// SetPostgresConfigs gets a reference to the given []PgConfig and assigns it to the PostgresConfigs field.
func (o *CreateInstance) SetPostgresConfigs(v []PgConfig) {
	o.PostgresConfigs = v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *CreateInstance) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *CreateInstance) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *CreateInstance) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *CreateInstance) GetRegionId() string {
	if o == nil || IsNil(o.RegionId) {
		var ret string
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetRegionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *CreateInstance) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given string and assigns it to the RegionId field.
func (o *CreateInstance) SetRegionId(v string) {
	o.RegionId = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *CreateInstance) GetReplicas() int32 {
	if o == nil || IsNil(o.Replicas) {
		var ret int32
		return ret
	}
	return *o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *CreateInstance) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given int32 and assigns it to the Replicas field.
func (o *CreateInstance) SetReplicas(v int32) {
	o.Replicas = &v
}

// GetSpot returns the Spot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetSpot() bool {
	if o == nil || IsNil(o.Spot.Get()) {
		var ret bool
		return ret
	}
	return *o.Spot.Get()
}

// GetSpotOk returns a tuple with the Spot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetSpotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spot.Get(), o.Spot.IsSet()
}

// HasSpot returns a boolean if a field has been set.
func (o *CreateInstance) HasSpot() bool {
	if o != nil && o.Spot.IsSet() {
		return true
	}

	return false
}

// SetSpot gets a reference to the given NullableBool and assigns it to the Spot field.
func (o *CreateInstance) SetSpot(v bool) {
	o.Spot.Set(&v)
}
// SetSpotNil sets the value for Spot to be an explicit nil
func (o *CreateInstance) SetSpotNil() {
	o.Spot.Set(nil)
}

// UnsetSpot ensures that no value is present for Spot, not even an explicit nil
func (o *CreateInstance) UnsetSpot() {
	o.Spot.Unset()
}

// GetStackType returns the StackType field value
func (o *CreateInstance) GetStackType() StackType {
	if o == nil {
		var ret StackType
		return ret
	}

	return o.StackType
}

// GetStackTypeOk returns a tuple with the StackType field value
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetStackTypeOk() (*StackType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackType, true
}

// SetStackType sets field value
func (o *CreateInstance) SetStackType(v StackType) {
	o.StackType = v
}

// GetStorage returns the Storage field value
func (o *CreateInstance) GetStorage() Storage {
	if o == nil {
		var ret Storage
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *CreateInstance) GetStorageOk() (*Storage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *CreateInstance) SetStorage(v Storage) {
	o.Storage = v
}

// GetTrunkInstalls returns the TrunkInstalls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateInstance) GetTrunkInstalls() []TrunkInstall {
	if o == nil {
		var ret []TrunkInstall
		return ret
	}
	return o.TrunkInstalls
}

// GetTrunkInstallsOk returns a tuple with the TrunkInstalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateInstance) GetTrunkInstallsOk() ([]TrunkInstall, bool) {
	if o == nil || IsNil(o.TrunkInstalls) {
		return nil, false
	}
	return o.TrunkInstalls, true
}

// HasTrunkInstalls returns a boolean if a field has been set.
func (o *CreateInstance) HasTrunkInstalls() bool {
	if o != nil && !IsNil(o.TrunkInstalls) {
		return true
	}

	return false
}

// SetTrunkInstalls gets a reference to the given []TrunkInstall and assigns it to the TrunkInstalls field.
func (o *CreateInstance) SetTrunkInstalls(v []TrunkInstall) {
	o.TrunkInstalls = v
}

func (o CreateInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppServices != nil {
		toSerialize["app_services"] = o.AppServices
	}
	if o.Autoscaling.IsSet() {
		toSerialize["autoscaling"] = o.Autoscaling.Get()
	}
	if o.ConnectionPooler.IsSet() {
		toSerialize["connection_pooler"] = o.ConnectionPooler.Get()
	}
	toSerialize["cpu"] = o.Cpu
	if o.DedicatedNetworking.IsSet() {
		toSerialize["dedicated_networking"] = o.DedicatedNetworking.Get()
	}
	toSerialize["environment"] = o.Environment
	if o.Experimental.IsSet() {
		toSerialize["experimental"] = o.Experimental.Get()
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.ExtraDomainsRw != nil {
		toSerialize["extra_domains_rw"] = o.ExtraDomainsRw
	}
	toSerialize["instance_name"] = o.InstanceName
	if o.IpAllowList != nil {
		toSerialize["ip_allow_list"] = o.IpAllowList
	}
	toSerialize["memory"] = o.Memory
	if !IsNil(o.PgVersion) {
		toSerialize["pg_version"] = o.PgVersion
	}
	if o.PostgresConfigs != nil {
		toSerialize["postgres_configs"] = o.PostgresConfigs
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if o.Spot.IsSet() {
		toSerialize["spot"] = o.Spot.Get()
	}
	toSerialize["stack_type"] = o.StackType
	toSerialize["storage"] = o.Storage
	if o.TrunkInstalls != nil {
		toSerialize["trunk_installs"] = o.TrunkInstalls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"environment",
		"instance_name",
		"memory",
		"stack_type",
		"storage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInstance := _CreateInstance{}

	err = json.Unmarshal(data, &varCreateInstance)

	if err != nil {
		return err
	}

	*o = CreateInstance(varCreateInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "app_services")
		delete(additionalProperties, "autoscaling")
		delete(additionalProperties, "connection_pooler")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "dedicated_networking")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "experimental")
		delete(additionalProperties, "extensions")
		delete(additionalProperties, "extra_domains_rw")
		delete(additionalProperties, "instance_name")
		delete(additionalProperties, "ip_allow_list")
		delete(additionalProperties, "memory")
		delete(additionalProperties, "pg_version")
		delete(additionalProperties, "postgres_configs")
		delete(additionalProperties, "provider_id")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "replicas")
		delete(additionalProperties, "spot")
		delete(additionalProperties, "stack_type")
		delete(additionalProperties, "storage")
		delete(additionalProperties, "trunk_installs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateInstance struct {
	value *CreateInstance
	isSet bool
}

func (v NullableCreateInstance) Get() *CreateInstance {
	return v.value
}

func (v *NullableCreateInstance) Set(val *CreateInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInstance(val *CreateInstance) *NullableCreateInstance {
	return &NullableCreateInstance{value: val, isSet: true}
}

func (v NullableCreateInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


