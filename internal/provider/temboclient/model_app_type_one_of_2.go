/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppTypeOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppTypeOneOf2{}

// AppTypeOneOf2 struct for AppTypeOneOf2
type AppTypeOneOf2 struct {
	MqApi NullableAppConfig `json:"mq-api"`
}

type _AppTypeOneOf2 AppTypeOneOf2

// NewAppTypeOneOf2 instantiates a new AppTypeOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppTypeOneOf2(mqApi NullableAppConfig) *AppTypeOneOf2 {
	this := AppTypeOneOf2{}
	this.MqApi = mqApi
	return &this
}

// NewAppTypeOneOf2WithDefaults instantiates a new AppTypeOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppTypeOneOf2WithDefaults() *AppTypeOneOf2 {
	this := AppTypeOneOf2{}
	return &this
}

// GetMqApi returns the MqApi field value
// If the value is explicit nil, the zero value for AppConfig will be returned
func (o *AppTypeOneOf2) GetMqApi() AppConfig {
	if o == nil || o.MqApi.Get() == nil {
		var ret AppConfig
		return ret
	}

	return *o.MqApi.Get()
}

// GetMqApiOk returns a tuple with the MqApi field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppTypeOneOf2) GetMqApiOk() (*AppConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.MqApi.Get(), o.MqApi.IsSet()
}

// SetMqApi sets field value
func (o *AppTypeOneOf2) SetMqApi(v AppConfig) {
	o.MqApi.Set(&v)
}

func (o AppTypeOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppTypeOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mq-api"] = o.MqApi.Get()
	return toSerialize, nil
}

func (o *AppTypeOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mq-api",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppTypeOneOf2 := _AppTypeOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppTypeOneOf2)

	if err != nil {
		return err
	}

	*o = AppTypeOneOf2(varAppTypeOneOf2)

	return err
}

type NullableAppTypeOneOf2 struct {
	value *AppTypeOneOf2
	isSet bool
}

func (v NullableAppTypeOneOf2) Get() *AppTypeOneOf2 {
	return v.value
}

func (v *NullableAppTypeOneOf2) Set(val *AppTypeOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableAppTypeOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableAppTypeOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppTypeOneOf2(val *AppTypeOneOf2) *NullableAppTypeOneOf2 {
	return &NullableAppTypeOneOf2{value: val, isSet: true}
}

func (v NullableAppTypeOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppTypeOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


