/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the PolicyData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyData{}

// PolicyData struct for PolicyData
type PolicyData struct {
	Policies []PolicyInput `json:"policies"`
	AdditionalProperties map[string]interface{}
}

type _PolicyData PolicyData

// NewPolicyData instantiates a new PolicyData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyData(policies []PolicyInput) *PolicyData {
	this := PolicyData{}
	this.Policies = policies
	return &this
}

// NewPolicyDataWithDefaults instantiates a new PolicyData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyDataWithDefaults() *PolicyData {
	this := PolicyData{}
	return &this
}

// GetPolicies returns the Policies field value
func (o *PolicyData) GetPolicies() []PolicyInput {
	if o == nil {
		var ret []PolicyInput
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *PolicyData) GetPoliciesOk() ([]PolicyInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *PolicyData) SetPolicies(v []PolicyInput) {
	o.Policies = v
}

func (o PolicyData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policies"] = o.Policies

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PolicyData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyData := _PolicyData{}

	err = json.Unmarshal(data, &varPolicyData)

	if err != nil {
		return err
	}

	*o = PolicyData(varPolicyData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "policies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePolicyData struct {
	value *PolicyData
	isSet bool
}

func (v NullablePolicyData) Get() *PolicyData {
	return v.value
}

func (v *NullablePolicyData) Set(val *PolicyData) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyData) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyData(val *PolicyData) *NullablePolicyData {
	return &NullablePolicyData{value: val, isSet: true}
}

func (v NullablePolicyData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


