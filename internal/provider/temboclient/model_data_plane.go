/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the DataPlane type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataPlane{}

// DataPlane struct for DataPlane
type DataPlane struct {
	Index string `json:"index"`
	ProviderId string `json:"provider_id"`
	ProviderName string `json:"provider_name"`
	Region string `json:"region"`
	RegionId string `json:"region_id"`
	RegionName string `json:"region_name"`
	AdditionalProperties map[string]interface{}
}

type _DataPlane DataPlane

// NewDataPlane instantiates a new DataPlane object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataPlane(index string, providerId string, providerName string, region string, regionId string, regionName string) *DataPlane {
	this := DataPlane{}
	this.Index = index
	this.ProviderId = providerId
	this.ProviderName = providerName
	this.Region = region
	this.RegionId = regionId
	this.RegionName = regionName
	return &this
}

// NewDataPlaneWithDefaults instantiates a new DataPlane object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataPlaneWithDefaults() *DataPlane {
	this := DataPlane{}
	return &this
}

// GetIndex returns the Index field value
func (o *DataPlane) GetIndex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *DataPlane) GetIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *DataPlane) SetIndex(v string) {
	o.Index = v
}

// GetProviderId returns the ProviderId field value
func (o *DataPlane) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *DataPlane) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *DataPlane) SetProviderId(v string) {
	o.ProviderId = v
}

// GetProviderName returns the ProviderName field value
func (o *DataPlane) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *DataPlane) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *DataPlane) SetProviderName(v string) {
	o.ProviderName = v
}

// GetRegion returns the Region field value
func (o *DataPlane) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *DataPlane) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *DataPlane) SetRegion(v string) {
	o.Region = v
}

// GetRegionId returns the RegionId field value
func (o *DataPlane) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *DataPlane) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *DataPlane) SetRegionId(v string) {
	o.RegionId = v
}

// GetRegionName returns the RegionName field value
func (o *DataPlane) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *DataPlane) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *DataPlane) SetRegionName(v string) {
	o.RegionName = v
}

func (o DataPlane) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataPlane) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["provider_name"] = o.ProviderName
	toSerialize["region"] = o.Region
	toSerialize["region_id"] = o.RegionId
	toSerialize["region_name"] = o.RegionName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataPlane) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"provider_id",
		"provider_name",
		"region",
		"region_id",
		"region_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataPlane := _DataPlane{}

	err = json.Unmarshal(data, &varDataPlane)

	if err != nil {
		return err
	}

	*o = DataPlane(varDataPlane)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "index")
		delete(additionalProperties, "provider_id")
		delete(additionalProperties, "provider_name")
		delete(additionalProperties, "region")
		delete(additionalProperties, "region_id")
		delete(additionalProperties, "region_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataPlane struct {
	value *DataPlane
	isSet bool
}

func (v NullableDataPlane) Get() *DataPlane {
	return v.value
}

func (v *NullableDataPlane) Set(val *DataPlane) {
	v.value = val
	v.isSet = true
}

func (v NullableDataPlane) IsSet() bool {
	return v.isSet
}

func (v *NullableDataPlane) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataPlane(val *DataPlane) *NullableDataPlane {
	return &NullableDataPlane{value: val, isSet: true}
}

func (v NullableDataPlane) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataPlane) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


