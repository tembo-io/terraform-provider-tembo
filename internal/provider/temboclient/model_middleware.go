/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// Middleware - struct for Middleware
type Middleware struct {
	MiddlewareOneOf *MiddlewareOneOf
	MiddlewareOneOf1 *MiddlewareOneOf1
	MiddlewareOneOf2 *MiddlewareOneOf2
}

// MiddlewareOneOfAsMiddleware is a convenience function that returns MiddlewareOneOf wrapped in Middleware
func MiddlewareOneOfAsMiddleware(v *MiddlewareOneOf) Middleware {
	return Middleware{
		MiddlewareOneOf: v,
	}
}

// MiddlewareOneOf1AsMiddleware is a convenience function that returns MiddlewareOneOf1 wrapped in Middleware
func MiddlewareOneOf1AsMiddleware(v *MiddlewareOneOf1) Middleware {
	return Middleware{
		MiddlewareOneOf1: v,
	}
}

// MiddlewareOneOf2AsMiddleware is a convenience function that returns MiddlewareOneOf2 wrapped in Middleware
func MiddlewareOneOf2AsMiddleware(v *MiddlewareOneOf2) Middleware {
	return Middleware{
		MiddlewareOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Middleware) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MiddlewareOneOf
	err = newStrictDecoder(data).Decode(&dst.MiddlewareOneOf)
	if err == nil {
		jsonMiddlewareOneOf, _ := json.Marshal(dst.MiddlewareOneOf)
		if string(jsonMiddlewareOneOf) == "{}" { // empty struct
			dst.MiddlewareOneOf = nil
		} else {
			match++
		}
	} else {
		dst.MiddlewareOneOf = nil
	}

	// try to unmarshal data into MiddlewareOneOf1
	err = newStrictDecoder(data).Decode(&dst.MiddlewareOneOf1)
	if err == nil {
		jsonMiddlewareOneOf1, _ := json.Marshal(dst.MiddlewareOneOf1)
		if string(jsonMiddlewareOneOf1) == "{}" { // empty struct
			dst.MiddlewareOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.MiddlewareOneOf1 = nil
	}

	// try to unmarshal data into MiddlewareOneOf2
	err = newStrictDecoder(data).Decode(&dst.MiddlewareOneOf2)
	if err == nil {
		jsonMiddlewareOneOf2, _ := json.Marshal(dst.MiddlewareOneOf2)
		if string(jsonMiddlewareOneOf2) == "{}" { // empty struct
			dst.MiddlewareOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.MiddlewareOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MiddlewareOneOf = nil
		dst.MiddlewareOneOf1 = nil
		dst.MiddlewareOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Middleware)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Middleware)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Middleware) MarshalJSON() ([]byte, error) {
	if src.MiddlewareOneOf != nil {
		return json.Marshal(&src.MiddlewareOneOf)
	}

	if src.MiddlewareOneOf1 != nil {
		return json.Marshal(&src.MiddlewareOneOf1)
	}

	if src.MiddlewareOneOf2 != nil {
		return json.Marshal(&src.MiddlewareOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Middleware) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MiddlewareOneOf != nil {
		return obj.MiddlewareOneOf
	}

	if obj.MiddlewareOneOf1 != nil {
		return obj.MiddlewareOneOf1
	}

	if obj.MiddlewareOneOf2 != nil {
		return obj.MiddlewareOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableMiddleware struct {
	value *Middleware
	isSet bool
}

func (v NullableMiddleware) Get() *Middleware {
	return v.value
}

func (v *NullableMiddleware) Set(val *Middleware) {
	v.value = val
	v.isSet = true
}

func (v NullableMiddleware) IsSet() bool {
	return v.isSet
}

func (v *NullableMiddleware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiddleware(val *Middleware) *NullableMiddleware {
	return &NullableMiddleware{value: val, isSet: true}
}

func (v NullableMiddleware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiddleware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


