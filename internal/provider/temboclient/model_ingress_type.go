/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// IngressType the model 'IngressType'
type IngressType string

// List of IngressType
const (
	HTTP IngressType = "http"
	TCP IngressType = "tcp"
)

// All allowed values of IngressType enum
var AllowedIngressTypeEnumValues = []IngressType{
	"http",
	"tcp",
}

func (v *IngressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IngressType(value)
	for _, existing := range AllowedIngressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IngressType", value)
}

// NewIngressTypeFromValue returns a pointer to a valid IngressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIngressTypeFromValue(v string) (*IngressType, error) {
	ev := IngressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IngressType: valid values are %v", v, AllowedIngressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IngressType) IsValid() bool {
	for _, existing := range AllowedIngressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IngressType value
func (v IngressType) Ptr() *IngressType {
	return &v
}

type NullableIngressType struct {
	value *IngressType
	isSet bool
}

func (v NullableIngressType) Get() *IngressType {
	return v.value
}

func (v *NullableIngressType) Set(val *IngressType) {
	v.value = val
	v.isSet = true
}

func (v NullableIngressType) IsSet() bool {
	return v.isSet
}

func (v *NullableIngressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngressType(val *IngressType) *NullableIngressType {
	return &NullableIngressType{value: val, isSet: true}
}

func (v NullableIngressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

