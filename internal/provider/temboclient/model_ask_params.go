/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the AskParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AskParams{}

// AskParams struct for AskParams
type AskParams struct {
	// The ask query. For example, \"how to create a Tembo instance\"
	Query string `json:"query"`
	AdditionalProperties map[string]interface{}
}

type _AskParams AskParams

// NewAskParams instantiates a new AskParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAskParams(query string) *AskParams {
	this := AskParams{}
	this.Query = query
	return &this
}

// NewAskParamsWithDefaults instantiates a new AskParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAskParamsWithDefaults() *AskParams {
	this := AskParams{}
	return &this
}

// GetQuery returns the Query field value
func (o *AskParams) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *AskParams) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *AskParams) SetQuery(v string) {
	o.Query = v
}

func (o AskParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AskParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AskParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAskParams := _AskParams{}

	err = json.Unmarshal(data, &varAskParams)

	if err != nil {
		return err
	}

	*o = AskParams(varAskParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAskParams struct {
	value *AskParams
	isSet bool
}

func (v NullableAskParams) Get() *AskParams {
	return v.value
}

func (v *NullableAskParams) Set(val *AskParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAskParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAskParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAskParams(val *AskParams) *NullableAskParams {
	return &NullableAskParams{value: val, isSet: true}
}

func (v NullableAskParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAskParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


