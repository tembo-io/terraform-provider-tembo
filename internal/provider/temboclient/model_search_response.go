/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResponse{}

// SearchResponse struct for SearchResponse
type SearchResponse struct {
	// The file path (in Tembo website repo) to the Tembo document
	FilePath string `json:"file_path"`
	FrontMatter interface{} `json:"front_matter,omitempty"`
	SimilarityScore float64 `json:"similarity_score"`
	AdditionalProperties map[string]interface{}
}

type _SearchResponse SearchResponse

// NewSearchResponse instantiates a new SearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResponse(filePath string, similarityScore float64) *SearchResponse {
	this := SearchResponse{}
	this.FilePath = filePath
	this.SimilarityScore = similarityScore
	return &this
}

// NewSearchResponseWithDefaults instantiates a new SearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResponseWithDefaults() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// GetFilePath returns the FilePath field value
func (o *SearchResponse) GetFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *SearchResponse) SetFilePath(v string) {
	o.FilePath = v
}

// GetFrontMatter returns the FrontMatter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchResponse) GetFrontMatter() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FrontMatter
}

// GetFrontMatterOk returns a tuple with the FrontMatter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchResponse) GetFrontMatterOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FrontMatter) {
		return nil, false
	}
	return &o.FrontMatter, true
}

// HasFrontMatter returns a boolean if a field has been set.
func (o *SearchResponse) HasFrontMatter() bool {
	if o != nil && !IsNil(o.FrontMatter) {
		return true
	}

	return false
}

// SetFrontMatter gets a reference to the given interface{} and assigns it to the FrontMatter field.
func (o *SearchResponse) SetFrontMatter(v interface{}) {
	o.FrontMatter = v
}

// GetSimilarityScore returns the SimilarityScore field value
func (o *SearchResponse) GetSimilarityScore() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.SimilarityScore
}

// GetSimilarityScoreOk returns a tuple with the SimilarityScore field value
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSimilarityScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SimilarityScore, true
}

// SetSimilarityScore sets field value
func (o *SearchResponse) SetSimilarityScore(v float64) {
	o.SimilarityScore = v
}

func (o SearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_path"] = o.FilePath
	if o.FrontMatter != nil {
		toSerialize["front_matter"] = o.FrontMatter
	}
	toSerialize["similarity_score"] = o.SimilarityScore

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_path",
		"similarity_score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchResponse := _SearchResponse{}

	err = json.Unmarshal(data, &varSearchResponse)

	if err != nil {
		return err
	}

	*o = SearchResponse(varSearchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "file_path")
		delete(additionalProperties, "front_matter")
		delete(additionalProperties, "similarity_score")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchResponse struct {
	value *SearchResponse
	isSet bool
}

func (v NullableSearchResponse) Get() *SearchResponse {
	return v.value
}

func (v *NullableSearchResponse) Set(val *SearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponse(val *SearchResponse) *NullableSearchResponse {
	return &NullableSearchResponse{value: val, isSet: true}
}

func (v NullableSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


