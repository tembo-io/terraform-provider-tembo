/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the AutoStop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoStop{}

// AutoStop AutoStop configures automatic stopping of idle instances. An instance is considered idle if it is more than two days old, hasn't been connected to in over a day, and has not been resumed within the last day. Idle instances are stopped in the time window 9-9:30 AM ET.
type AutoStop struct {
	// Enable automatic stopping of the instance when idle.
	Enabled bool `json:"enabled"`
	AdditionalProperties map[string]interface{}
}

type _AutoStop AutoStop

// NewAutoStop instantiates a new AutoStop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoStop(enabled bool) *AutoStop {
	this := AutoStop{}
	this.Enabled = enabled
	return &this
}

// NewAutoStopWithDefaults instantiates a new AutoStop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoStopWithDefaults() *AutoStop {
	this := AutoStop{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *AutoStop) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AutoStop) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AutoStop) SetEnabled(v bool) {
	o.Enabled = v
}

func (o AutoStop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoStop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AutoStop) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAutoStop := _AutoStop{}

	err = json.Unmarshal(data, &varAutoStop)

	if err != nil {
		return err
	}

	*o = AutoStop(varAutoStop)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAutoStop struct {
	value *AutoStop
	isSet bool
}

func (v NullableAutoStop) Get() *AutoStop {
	return v.value
}

func (v *NullableAutoStop) Set(val *AutoStop) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoStop) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoStop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoStop(val *AutoStop) *NullableAutoStop {
	return &NullableAutoStop{value: val, isSet: true}
}

func (v NullableAutoStop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoStop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


