/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
)

// checks if the DedicatedNetworking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DedicatedNetworking{}

// DedicatedNetworking Configuration for dedicated networking.
type DedicatedNetworking struct {
	// Enables or disables dedicated networking. Default is false.
	Enabled NullableBool `json:"enabled,omitempty"`
	// If true, includes the standby instance in the dedicated networking setup. Default is false.
	IncludeStandby NullableBool `json:"includeStandby,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DedicatedNetworking DedicatedNetworking

// NewDedicatedNetworking instantiates a new DedicatedNetworking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedNetworking() *DedicatedNetworking {
	this := DedicatedNetworking{}
	return &this
}

// NewDedicatedNetworkingWithDefaults instantiates a new DedicatedNetworking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedNetworkingWithDefaults() *DedicatedNetworking {
	this := DedicatedNetworking{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DedicatedNetworking) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DedicatedNetworking) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *DedicatedNetworking) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *DedicatedNetworking) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *DedicatedNetworking) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *DedicatedNetworking) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetIncludeStandby returns the IncludeStandby field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DedicatedNetworking) GetIncludeStandby() bool {
	if o == nil || IsNil(o.IncludeStandby.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeStandby.Get()
}

// GetIncludeStandbyOk returns a tuple with the IncludeStandby field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DedicatedNetworking) GetIncludeStandbyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeStandby.Get(), o.IncludeStandby.IsSet()
}

// HasIncludeStandby returns a boolean if a field has been set.
func (o *DedicatedNetworking) HasIncludeStandby() bool {
	if o != nil && o.IncludeStandby.IsSet() {
		return true
	}

	return false
}

// SetIncludeStandby gets a reference to the given NullableBool and assigns it to the IncludeStandby field.
func (o *DedicatedNetworking) SetIncludeStandby(v bool) {
	o.IncludeStandby.Set(&v)
}
// SetIncludeStandbyNil sets the value for IncludeStandby to be an explicit nil
func (o *DedicatedNetworking) SetIncludeStandbyNil() {
	o.IncludeStandby.Set(nil)
}

// UnsetIncludeStandby ensures that no value is present for IncludeStandby, not even an explicit nil
func (o *DedicatedNetworking) UnsetIncludeStandby() {
	o.IncludeStandby.Unset()
}

func (o DedicatedNetworking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DedicatedNetworking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.IncludeStandby.IsSet() {
		toSerialize["includeStandby"] = o.IncludeStandby.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DedicatedNetworking) UnmarshalJSON(data []byte) (err error) {
	varDedicatedNetworking := _DedicatedNetworking{}

	err = json.Unmarshal(data, &varDedicatedNetworking)

	if err != nil {
		return err
	}

	*o = DedicatedNetworking(varDedicatedNetworking)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "includeStandby")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedNetworking struct {
	value *DedicatedNetworking
	isSet bool
}

func (v NullableDedicatedNetworking) Get() *DedicatedNetworking {
	return v.value
}

func (v *NullableDedicatedNetworking) Set(val *DedicatedNetworking) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedNetworking) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedNetworking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedNetworking(val *DedicatedNetworking) *NullableDedicatedNetworking {
	return &NullableDedicatedNetworking{value: val, isSet: true}
}

func (v NullableDedicatedNetworking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedNetworking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


