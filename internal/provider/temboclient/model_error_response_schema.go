/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"fmt"
)

// checks if the ErrorResponseSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponseSchema{}

// ErrorResponseSchema struct for ErrorResponseSchema
type ErrorResponseSchema struct {
	Error string `json:"error"`
	AdditionalProperties map[string]interface{}
}

type _ErrorResponseSchema ErrorResponseSchema

// NewErrorResponseSchema instantiates a new ErrorResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseSchema(error_ string) *ErrorResponseSchema {
	this := ErrorResponseSchema{}
	this.Error = error_
	return &this
}

// NewErrorResponseSchemaWithDefaults instantiates a new ErrorResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseSchemaWithDefaults() *ErrorResponseSchema {
	this := ErrorResponseSchema{}
	return &this
}

// GetError returns the Error field value
func (o *ErrorResponseSchema) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ErrorResponseSchema) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ErrorResponseSchema) SetError(v string) {
	o.Error = v
}

func (o ErrorResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponseSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorResponseSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponseSchema := _ErrorResponseSchema{}

	err = json.Unmarshal(data, &varErrorResponseSchema)

	if err != nil {
		return err
	}

	*o = ErrorResponseSchema(varErrorResponseSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorResponseSchema struct {
	value *ErrorResponseSchema
	isSet bool
}

func (v NullableErrorResponseSchema) Get() *ErrorResponseSchema {
	return v.value
}

func (v *NullableErrorResponseSchema) Set(val *ErrorResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseSchema(val *ErrorResponseSchema) *NullableErrorResponseSchema {
	return &NullableErrorResponseSchema{value: val, isSet: true}
}

func (v NullableErrorResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


