/*
Tembo Cloud

Platform API for Tembo Cloud             </br>             </br>             To find a Tembo Data API, please find it here:             </br>             </br>             [AWS US East 1](https://api.data-1.use1.tembo.io/swagger-ui/)             

API version: v1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package temboclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StripPrefixConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripPrefixConfig{}

// StripPrefixConfig struct for StripPrefixConfig
type StripPrefixConfig struct {
	Config []string `json:"config"`
	Name string `json:"name"`
}

type _StripPrefixConfig StripPrefixConfig

// NewStripPrefixConfig instantiates a new StripPrefixConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripPrefixConfig(config []string, name string) *StripPrefixConfig {
	this := StripPrefixConfig{}
	this.Config = config
	this.Name = name
	return &this
}

// NewStripPrefixConfigWithDefaults instantiates a new StripPrefixConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripPrefixConfigWithDefaults() *StripPrefixConfig {
	this := StripPrefixConfig{}
	return &this
}

// GetConfig returns the Config field value
func (o *StripPrefixConfig) GetConfig() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *StripPrefixConfig) GetConfigOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *StripPrefixConfig) SetConfig(v []string) {
	o.Config = v
}

// GetName returns the Name field value
func (o *StripPrefixConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StripPrefixConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StripPrefixConfig) SetName(v string) {
	o.Name = v
}

func (o StripPrefixConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripPrefixConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *StripPrefixConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStripPrefixConfig := _StripPrefixConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStripPrefixConfig)

	if err != nil {
		return err
	}

	*o = StripPrefixConfig(varStripPrefixConfig)

	return err
}

type NullableStripPrefixConfig struct {
	value *StripPrefixConfig
	isSet bool
}

func (v NullableStripPrefixConfig) Get() *StripPrefixConfig {
	return v.value
}

func (v *NullableStripPrefixConfig) Set(val *StripPrefixConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStripPrefixConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStripPrefixConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripPrefixConfig(val *StripPrefixConfig) *NullableStripPrefixConfig {
	return &NullableStripPrefixConfig{value: val, isSet: true}
}

func (v NullableStripPrefixConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripPrefixConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


