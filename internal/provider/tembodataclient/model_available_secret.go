/*
Tembo Data API

In the case of large or sensitive data, we avoid collecting it into Tembo Cloud. Instead, there is a Tembo Data API for each region, cloud, or private data plane.             </br>             </br>             To find the Tembo Cloud API, please find it [here](https://api.tembo.io/swagger-ui/).             

API version: v0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tembodataclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AvailableSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableSecret{}

// AvailableSecret struct for AvailableSecret
type AvailableSecret struct {
	// The name of an available secret
	Name string `json:"name"`
	// For this secret, available keys
	PossibleKeys []string `json:"possible_keys"`
}

type _AvailableSecret AvailableSecret

// NewAvailableSecret instantiates a new AvailableSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableSecret(name string, possibleKeys []string) *AvailableSecret {
	this := AvailableSecret{}
	this.Name = name
	this.PossibleKeys = possibleKeys
	return &this
}

// NewAvailableSecretWithDefaults instantiates a new AvailableSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableSecretWithDefaults() *AvailableSecret {
	this := AvailableSecret{}
	return &this
}

// GetName returns the Name field value
func (o *AvailableSecret) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AvailableSecret) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AvailableSecret) SetName(v string) {
	o.Name = v
}

// GetPossibleKeys returns the PossibleKeys field value
func (o *AvailableSecret) GetPossibleKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PossibleKeys
}

// GetPossibleKeysOk returns a tuple with the PossibleKeys field value
// and a boolean to check if the value has been set.
func (o *AvailableSecret) GetPossibleKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PossibleKeys, true
}

// SetPossibleKeys sets field value
func (o *AvailableSecret) SetPossibleKeys(v []string) {
	o.PossibleKeys = v
}

func (o AvailableSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["possible_keys"] = o.PossibleKeys
	return toSerialize, nil
}

func (o *AvailableSecret) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"possible_keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailableSecret := _AvailableSecret{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailableSecret)

	if err != nil {
		return err
	}

	*o = AvailableSecret(varAvailableSecret)

	return err
}

type NullableAvailableSecret struct {
	value *AvailableSecret
	isSet bool
}

func (v NullableAvailableSecret) Get() *AvailableSecret {
	return v.value
}

func (v *NullableAvailableSecret) Set(val *AvailableSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableSecret(val *AvailableSecret) *NullableAvailableSecret {
	return &NullableAvailableSecret{value: val, isSet: true}
}

func (v NullableAvailableSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


