/*
Tembo Data API

In the case of large or sensitive data, we avoid collecting it into Tembo Cloud. Instead, there is a Tembo Data API for each region, cloud, or private data plane.             </br>             </br>             To find the Tembo Cloud API, please find it [here](https://api.tembo.io/swagger-ui/).             

API version: v0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tembodataclient

import (
	"encoding/json"
	"fmt"
)

// checks if the PasswordString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordString{}

// PasswordString struct for PasswordString
type PasswordString struct {
	// The New Password
	Password string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _PasswordString PasswordString

// NewPasswordString instantiates a new PasswordString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordString(password string) *PasswordString {
	this := PasswordString{}
	this.Password = password
	return &this
}

// NewPasswordStringWithDefaults instantiates a new PasswordString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordStringWithDefaults() *PasswordString {
	this := PasswordString{}
	return &this
}

// GetPassword returns the Password field value
func (o *PasswordString) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *PasswordString) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *PasswordString) SetPassword(v string) {
	o.Password = v
}

func (o PasswordString) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PasswordString) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPasswordString := _PasswordString{}

	err = json.Unmarshal(data, &varPasswordString)

	if err != nil {
		return err
	}

	*o = PasswordString(varPasswordString)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePasswordString struct {
	value *PasswordString
	isSet bool
}

func (v NullablePasswordString) Get() *PasswordString {
	return v.value
}

func (v *NullablePasswordString) Set(val *PasswordString) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordString) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordString(val *PasswordString) *NullablePasswordString {
	return &NullablePasswordString{value: val, isSet: true}
}

func (v NullablePasswordString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


